.\" ============================================================================
.TH vsearch 1 "February 16, 2018" "version 2.7.1" "USER COMMANDS"
.\" ============================================================================
.SH NAME
vsearch \(em chimera detection, clustering, dereplication and
rereplication, FASTA/FASTQ file processing, masking, pairwise
alignment, searching, shuffling, sorting and subsampling of amplicons
for metagenomics, genomics, and population genetics.
.\" ============================================================================
.SH SYNOPSIS
.\" left justified, ragged right
.ad l
Chimera detection:
.RS
\fBvsearch\fR (\-\-uchime_denovo | \-\-uchime2_denovo |
\-\-uchime3_denovo) \fIfastafile\fR (\-\-chimeras | \-\-nonchimeras |
\-\-uchimealns | \-\-uchimeout) \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-uchime_ref \fIfastafile\fR (\-\-chimeras |
\-\-nonchimeras | \-\-uchimealns | \-\-uchimeout) \fIoutputfile\fR
\-\-db \fIfastafile\fR [\fIoptions\fR]
.PP
.RE
Clustering:
.RS
\fBvsearch\fR (\-\-cluster_fast | \-\-cluster_size |
\-\-cluster_smallmem | \-\-cluster_unoise) \fIfastafile\fR (\-\-alnout
| \-\-biomout | \-\-blast6out | \-\-centroids | \-\-clusters |
\-\-mothur_shared_out | \-\-msaout | \-\-otutabout | \-\-profile |
\-\-samout | \-\-uc | \-\-userout) \fIoutputfile\fR \-\-id \fIreal\fR
[\fIoptions\fR]
.PP
.RE
Dereplication and rereplication:
.RS
\fBvsearch\fR (\-\-derep_fulllength | \-\-derep_prefix)
\fIfastafile\fR (\-\-output | \-\-uc) \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-rereplicate \fIfastafile\fR \-\-output
\fIoutputfile\fR [\fIoptions\fR]
.PP
.RE
FASTA/FASTQ file processing:
.RS
\fBvsearch\fR \-\-fastq_chars \fIfastqfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-fastq_convert \fIfastqfile\fR \-\-fastqout
\fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR (\-\-fastq_eestats | \-\-fastq_eestats2) \fIfastqfile\fR
\-\-output \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-fastq_filter \fIfastqfile\fR (\-\-fastaout |
\-\-fastaout_discarded | \-\-fastqout | \-\-fastqout_discarded)
\fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-fastq_mergepairs \fIfastqfile\fR \-\-reverse
\fIfastqfile\fR (\-\-fastaout | \-\-fastqout |
\-\-fastaout_notmerged_fwd | \-\-fastaout_notmerged_rev |
\-\-fastqout_notmerged_fwd | \-\-fastqout_notmerged_rev |
\-\-eetabbedout) \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-fastq_stats \fIfastqfile\fR
[\-\-log \fIlogfile\fR] [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-fastx_revcomp \fIfastxfile\fR (\-\-fastaout |
\-\-fastqout) \fIoutputfile\fR [\fIoptions\fR]
.PP
.RE
Masking:
.RS
\fBvsearch\fR \-\-fastx_mask \fIfastxfile\fR (\-\-fastaout |
\-\-fastqout) \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-maskfasta \fIfastafile\fR \-\-output
\fIoutputfile\fR [\fIoptions\fR]
.PP
.RE
Pairwise alignment:
.RS
\fBvsearch\fR \-\-allpairs_global \fIfastafile\fR (\-\-alnout |
\-\-blast6out | \-\-matched | \-\-notmatched | \-\-samout | \-\-uc |
\-\-userout) \fIoutputfile\fR (\-\-acceptall | \-\-id \fIreal\fR)
[\fIoptions\fR]
.PP
.RE
Searching:
.RS
\fBvsearch\fR \-\-search_exact \fIfastafile\fR \-\-db \fIfastafile\fR
(\-\-alnout | \-\-biomout | \-\-blast6out | \-\-mothur_shared_out |
\-\-otutabout | \-\-samout | \-\-uc | \-\-userout) \fIoutputfile\fR
[\fIoptions\fR]
.PP
\fBvsearch\fR \-\-usearch_global \fIfastafile\fR \-\-db
\fIfastafile\fR (\-\-alnout | \-\-biomout | \-\-blast6out |
\-\-mothur_shared_out | \-\-otutabout | \-\-samout | \-\-uc |
\-\-userout) \fIoutputfile\fR \-\-id \fIreal\fR [\fIoptions\fR]
.PP
.RE
Shuffling and sorting:
.RS
\fBvsearch\fR (\-\-shuffle | \-\-sortbylength | \-\-sortbysize)
\fIfastafile\fR \-\-output \fIoutputfile\fR [\fIoptions\fR]
.PP
.RE
Subsampling:
.RS
\fBvsearch\fR \-\-fastx_subsample \fIfastafile\fR (\-\-fastaout |
\-\-fastqout) \fIoutputfile\fR (\-\-sample_pct \fIreal\fR |
\-\-sample_size \fIpositive integer\fR) [\fIoptions\fR]
.PP
.RE
UDB database handling:
.RS
\fBvsearch\fR \-\-makeudb_usearch \fIfastafile\fR \-\-output \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR \-\-udb2fasta \fIudbfile\fR \-\-output \fIoutputfile\fR [\fIoptions\fR]
.PP
\fBvsearch\fR (\-\-udbinfo | \-\-udbstats) \fIudbfile\fR [\fIoptions\fR]
.PP
.RE
.\" left and right justified (default)
.ad b 
.\" ============================================================================
.SH DESCRIPTION
Environmental or clinical molecular diversity studies generate large
volumes of amplicons (e.g.; SSU-rRNA sequences) that need to be
checked for chimeras, dereplicated, masked, sorted, searched,
clustered or compared to reference sequences. The aim of \fBvsearch\fR
is to offer a all-in-one open source tool to perform these tasks,
using optimized algorithm implementations and harvesting the full
potential of modern computers, thus providing fast and accurate data
processing.
.PP
Comparing nucleotide sequences is at the core of \fBvsearch\fR. To
speed up comparisons, \fBvsearch\fR implements an extremely fast
Needleman-Wunsch algorithm, making use of the Streaming SIMD
Extensions (SSE2) of post-2003 x86-64 CPUs.  If SSE2 instructions are
not available, \fBvsearch\fR exits with an error message. On Power8
CPUs it will use AltiVec/VSX/VMX instructions. Memory usage increases
rapidly with sequence length: for example comparing two sequences of
length 1 kb requires 8 MB of memory per thread, and comparing two 10
kb sequences requires 800 MB of memory per thread. For comparisons
involving sequences with a length product greater than 25 million (for
example two sequences of length 5 kb), \fBvsearch\fR uses a slower
alignment method described by Hirschberg (1975) and Myers and Miller
(1988), with much smaller memory requirements.
.\" ----------------------------------------------------------------------------
.SS Input
\fBvsearch\fR accept as input fasta or fastq files containing one or
several nucleotidic entries. In fasta files, each nucleotidic entry is
made of a header and a sequence. The header is defined as the string
comprised between the '>' symbol and the first space, tab or the end
of the line, whichever comes first. Additionally, if the header
matches
'>[;]size=\fIinteger\fR;label', '>label;size=\fIinteger\fR;label' or
'>label;size=\fIinteger\fR[;]', \fBvsearch\fR interpret
\fIinteger\fR as the number of occurrences (or abundance) of the
sequence in the study. That abundance information is used or created
during chimera detection, clustering, dereplication, sorting and
searching.
.PP
The sequence is defined as a string of IUPAC symbols
(ACGTURYSWKMDBHVN), starting after the end of the identifier line and
ending before the next identifier line, or the file end. \fBvsearch\fR
silently ignores ascii characters 9 to 13, and exits with an error
message if ascii characters 0 to 8, 14 to 31, '.' or '-' are
present. All other ascii or non-ascii characters are stripped and
complained about in a warning message.
.PP
In fastq files, each entry is made of sequence header starting with a
symbol '@', a nucleotidic sequence (same rules as for fasta
sequences), a quality header starting with a symbol '+' and a string
of ASCII characters (offset 33 or 64), each one encoding the quality
value of the corresponding position in the nucleotidic sequence.
.PP
\fBvsearch\fR operations are case insensitive, except when soft
masking is activated. Masking is automatically applied during chimera
detection, clustering, masking, pairwise alignment and searching. Soft
masking is specified with the options '\-\-dbmask soft' (for searching
and chimera detection with a reference) or '\-\-qmask soft' (for
searching, \fIde novo\fR chimera detection, clustering and
masking). When using soft masking, lower case letters indicate masked
symbols, while upper case letters indicate regular symbols. Masked
symbols are never included in the unique index words used for sequence
comparisons, otherwise they are treated as normal symbols.
.PP
When comparing sequences during chimera detection, dereplication,
searching and clustering, T and U are considered identical, regardless
of their case. If two symbols are not identical, their alignment
result in a negative mismatch score (default -4), except if one or
both of the symbols are ambiguous (RYSWKMDBHVN) in which case the
score is zero. Alignment of two identical ambiguous symbols (for
example, R vs R) also receives a score of zero.
.PP
\fBvsearch\fR can read data from standard files and write to standard
files, but it can also read from pipes and write to pipes! For
example, multiple fasta files can be piped into \fBvsearch\fR for
dereplication. To do so, file names can be replaced with:
.RS
.IP - 2
the symbol '-', representing '/dev/stdin' for input files
or '/dev/stdout' for output files,
.IP -
a named pipe created with the command mkfifo,
.IP -
a process substitution '<(command)' as input or '>(command)' as
output.
.RE
.PP
\fBvsearch\fR can automatically read compressed gzip or bzip2 files if
the appropriate libraries are present during the
compilation. \fBvsearch\fR can also read pipes streaming compressed
gzip or bzip2 data if the options \-\-gzip_decompress or
\-\-bzip2_decompress are selected. When reading from a pipe, the
progress indicator is not updated.
.\" ----------------------------------------------------------------------------
.SS Options
\fBvsearch\fR recognizes a large number of command-line options. For
easier navigation, options are grouped below by theme (chimera
detection, clustering, dereplication and rereplication, FASTA/FASTQ
file processing, masking, pairwise alignment, searching, shuffling,
sorting, and subsampling). We start with the general options that
apply to all themes. Options may start with a single (\-) or double
dash (\-\-). Option names may be shortened as long as they are not
ambiguous (e.g. \-\-derep_f).
.PP
General options:
.RS
.TP 9
.B \-\-bzip2_decompress
When reading from a pipe streaming bzip2-compressed data, decompress
the data. That option is not needed when reading from a standard
bzip2-compressed file.
.TP
.BI \-\-fasta_width\~ "positive integer"
Fasta files produced by \fBvsearch\fR are wrapped (sequences are
written on lines of \fIinteger\fR nucleotides, 80 by default). Set
that value to zero to eliminate the wrapping.
.TP
.B \-\-gzip_decompress
When reading from a pipe streaming gzip-compressed data, decompress
the data. That option is not needed when reading from a standard
gzip-compressed file.
.TP
.B \-\-help | \-h
Display help text and exit.
.TP
.BI \-\-log \0filename
Write messages to the specified log file. Information written includes
program version, amount of memory available, number of cores and
command line options, and if need be, informational messages, warnings
and fatal errors. The start and finish times are also recorded as well
as the elapsed time and the maximum amount of memory consumed. The
different \fBvsearch\fB commands can also write additional
informations to the log file.
.TP
.BI \-\-maxseqlength\~ "positive integer"
All \fBvsearch\fR operations discard sequences of length equal or
greater than \fIinteger\fR (50,000 nucleotides by default).
.TP
.BI \-\-minseqlength\~ "positive integer"
All \fBvsearch\fR operations discard sequences of length smaller than
\fIinteger\fR: 1 nucleotide by default for sorting or shuffling, 32
nucleotides for clustering, dereplication or searching.
.TP
.B \-\-no_progress
Do not show the gradually increasing progress indicator.
.TP
.B \-\-notrunclabels
Do not truncate sequence labels at first space or tab, use the full
header in output files.
.TP
.B \-\-quiet
Suppress all messages to stdout and stderr except for warnings and
fatal error messages.
.TP
.BI \-\-threads\~ "positive integer"
Number of computation threads to use (1 to 256). The number of threads
should be lesser or equal to the number of available CPU cores. The
default is to use all available resources and to launch one thread per
logical core. The following commands are multi-threaded:
allpairs_global, cluster_fast, cluster_size, cluster_smallmem,
fastq_mergepairs, maskfasta, search_exact, uchime_ref, and
usearch_global. Only one thread is used for the other commands.
.TP
.B \-\-version | \-v
Output version information and exit.
.RE
.PP
.\" ----------------------------------------------------------------------------
Chimera detection options:
.PP
.RS
Chimera detection is based on a scoring function controlled by five
options (\-\-dn, \-\-mindiffs, \-\-mindiv, \-\-minh,
\-\-xn). Sequences are first sorted by decreasing abundance, if
available, and compared on their \fIplus\fR strand only (case
insensitive).
.PP
Input sequences are masked as specified with the \-\-qmask and
\-\-hardmask options. Masking of the database for reference based
chimera detection is specified with the \-\-dbmask option.
.PP
In \fIde novo\fR mode, input fasta file should present abundance
annotations (i.e. a pattern [;]size=\fIinteger\fR[;] in the fasta
header). Input order matters for chimera detection, so we recommend to
sort sequences by decreasing abundance (default of
\-\-derep_fulllength command). If your sequence set needs to be
sorted, please see the \-\-sortbysize command in the sorting section.
.PP
.TP 9
.BI \-\-abskew \0real
When using \-\-uchime_denovo, the abundance skew is used to
distinguish in a three-way alignment which sequence is the chimera and
which are the parents. The assumption is that chimeras appear later in
the PCR amplification process and are therefore less abundant than
their parents. For \-\-uchime3_denovo the default value is 16.0. For
the other commands, the default value is 2.0, which means that the
parents should be at least 2 times more abundant than their
chimera. Any positive value equal or greater than 1.0 can be used.
.TP
.BI \-\-alignwidth\~ "positive integer"
When using \-\-uchimealns, set the width of the three-way alignments
(80 nucleotides by default). Set to zero to eliminate wrapping.
.TP
.BI \-\-borderline \0filename
Output borderline chimeric sequences to \fIfilename\fR, in fasta
format. Borderline chimeric sequences are sequences that have a high
enough score but which are not sufficiently different from their
closest parent.
.TP
.BI \-\-chimeras \0filename
Output chimeric sequences to \fIfilename\fR, in fasta format. Output
order may vary when using multiple threads.
.TP
.BI \-\-db \0filename
When using \-\-uchime_ref, detect chimeras using the fasta-formatted
reference sequences contained in \fIfilename\fR. Reference sequences
are assumed to be chimera-free. Chimeras cannot be detected if their
parents, or sufficiently close relatives, are not present in the
database.
.TP
.BI \-\-dn \0real
No vote pseudo-count, corresponding to the parameter \fIn\fR in the
chimera scoring function (default value is 1.4).
.TP
.B \-\-fasta_score
Add the chimera score to the headers in the fasta output files for
chimeras, non-chimeras and borderline sequences, using the format
';uchime_denovo=\fIfloat\fR;'.
.TP
.BI \-\-mindiffs\~ "positive integer"
Minimum number of differences per segment (default value is 3). The
parameter is ignored with \-\-uchime2_denovo and \-\-uchime3_denovo.
.TP
.BI \-\-mindiv \0real
Minimum divergence from closest parent (default value is 0.8). The
parameter is ignored with \-\-uchime2_denovo and \-\-uchime3_denovo.
.TP
.BI \-\-minh \0real
Minimum score (\fIh\fR). Increasing this value tends to reduce the
number of false positives and to decrease sensitivity. Default value
is 0.28, and values ranging from 0.0 to 1.0 included are accepted. The
parameter is ignored with \-\-uchime2_denovo and \-\-uchime3_denovo.
.TP
.BI \-\-nonchimeras \0filename
Output non-chimeric sequences to \fIfilename\fR, in fasta
format. Output order may vary when using multiple threads.
.TP
.BI \-\-relabel \0string
Relabel sequences using the prefix \fIstring\fR and a ticker (1, 2, 3,
etc.) to construct the new headers. Use \-\-sizeout to conserve the
abundance annotations.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.B \-\-relabel_md5
Relabel sequences using the MD5 message digest algorithm applied to
each sequence. Former sequence headers are discarded. The sequence is
converted to upper case and each 'U' is replaced by a 'T' before
computation of the digest. The MD5 digest is a cryptographic hash
function designed to minimize the probability that two different
inputs give the same output, even for very similar, but non-identical
inputs. Still, there is a very small, but non-zero, probability that
two different inputs give the same digest (i.e. a collision). MD5
generates a 128-bit (16-byte) digest that is represented by 16
hexadecimal numbers (using 32 symbols among 0123456789abcdef). Use
\-\-sizeout to conserve the abundance annotations.
.\" The probablity of collision for two sequences is 1/2^128
.TP
.B \-\-relabel_sha1
Relabel sequences using the SHA1 message digest algorithm applied to
each sequence. It is similar to the \-\-relabel_md5 option but uses
the SHA1 algorithm instead of the MD5 algorithm. SHA1 generates a
160-bit (20-byte) digest that is represented by 20 hexadecimal numbers
(40 symbols). The probability of a collision (two non-identical
sequences resulting in the same digest) is smaller for the SHA1
algorithm than it is for the MD5 algorithm.
.\" The probablity of collision for two sequences is 1/2^160
.TP
.B \-\-self
When using \-\-uchime_ref, ignore a reference sequence when its label
matches the label of the query sequence (useful to estimate
false-positive rate in reference sequences).
.\" I am not sure the statement above is true.
.TP
.B \-\-selfid
When using \-\-uchime_ref, ignore a reference sequence when its
nucleotide sequence is strictly identical to the nucleotidic sequence
of the query.
.TP
.B \-\-sizeout
When relabelling, add abundance annotations to fasta headers (using
the format ';size=\fIinteger\fR;').
.TP
.BI \-\-uchime_denovo \0filename
Detect chimeras present in the fasta-formatted \fIfilename\fR, without
external references (i.e. \fIde novo\fR). Automatically sort the
sequences in \fIfilename\fR by decreasing abundance beforehand (see
the sorting section for details). Multithreading is not supported.
.TP
.BI \-\-uchime2_denovo \0filename
Detect chimeras present in the fasta-formatted \fIfilename\fR, using
the UCHIME2 algorithm. This algorithm is designed for denoised
amplicons (see \-\-cluster_unoise). Automatically sort the sequences
in \fIfilename\fR by decreasing abundance beforehand (see the sorting
section for details).  Multithreading is not supported.
.TP
.BI \-\-uchime3_denovo \0filename
Detect chimeras present in the fasta-formatted \fIfilename\fR, using
the UCHIME2 algorithm. The only difference from \-\-uchime2_denovo is
that the default minimum abundance skew (\-\-abskew) is set to 16.0
rather than 2.0.
.TP
.BI \-\-uchime_ref \0filename
Detect chimeras present in the fasta-formatted \fIfilename\fR by
comparing them with reference sequences (option
\-\-db). Multithreading is supported.
.TP
.BI \-\-uchimealns \0filename
Write the three-way global alignments (parentA, parentB, chimera) to
\fIfilename\fR using a human-readable format. Use \-\-alignwidth to
modify alignment length. Output order may vary when using multiple
threads. All sequences are converted to upper case before
alignment. Lower case letters indicate disagreement in the alignment.
.TP
.BI \-\-uchimeout \0filename
Write chimera detection results to \fIfilename\fR using a 18-field,
tab\-separated uchime\-like format. Use \-\-uchimeout5 to use a format
compatible with usearch v5 and earlier versions. Rows output order may
vary when using multiple threads.
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
score: higher score means a more likely chimeric alignment.
.IP \n+[step].
Q: query sequence label.
.IP \n+[step].
A: parent A sequence label.
.IP \n+[step].
B: parent B sequence label.
.IP \n+[step].
T: top parent sequence label (i.e. parent most similar to the
query). That field is removed when using \-\-uchimeout5.
.IP \n+[step].
idQM: percentage of similarity of query (Q) and model (M)
constructed as a part of parent A and a part of parent B.
.IP \n+[step].
idQA: percentage of similarity of query (Q) and parent A.
.IP \n+[step].
idQB: percentage of similarity of query (Q) and parent B.
.IP \n+[step].
idAB: percentage of similarity of parent A and parent B.
.IP \n+[step].
idQT: percentage of similarity of query (Q) and top parent (T).
.IP \n+[step].
LY: yes votes in the left part of the model.
.IP \n+[step].
LN: no votes in the left part of the model.
.IP \n+[step].
LA: abstain votes in the left part of the model.
.IP \n+[step].
RY: yes votes in the right part of the model.
.IP \n+[step].
RN: no votes in the right part of the model.
.IP \n+[step].
RA: abstain votes in the right part of the model.
.IP \n+[step].
div: divergence, defined as (idQM - idQT).
.IP \n+[step].
YN: query is chimeric (Y), or not (N), or is a borderline case (?).
.RE
.RE
.TP
.B \-\-uchimeout5
When using \-\-uchimeout, write chimera detection results using a
17\-field, tab\-separated uchime\-like format (drop the 5th field of
\-\-uchimeout), compatible with usearch version 5 and earlier
versions.
.TP
.BI \-\-xn \0real
No vote weight, corresponding to the parameter \fIbeta\fR in the
scoring function (default value is 8.0).
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
Clustering options:
.RS
.PP
\fBvsearch\fR implements a single-pass, greedy centroid-based
clustering algorithm, similar to the algorithms implemented in
usearch, DNAclust and sumaclust for example. Important parameters are
the global clustering threshold (\-\-id) and the pairwise identity
definition (\-\-iddef).
.PP
Input sequences are masked as specified with the \-\-qmask and
\-\-hardmask options.
.TP 9
.BI \-\-biomout \0filename
Generate an OTU table in the biom version 1.0 JSON file format as
specified at
http://biom-format.org/documentation/format_versions/biom-1.0.html.
The format describes how to store a sparse matrix containing the
abundances of the OTUs in the different samples. This format is much
more efficient than the classic and mothur OTU table formats available
with the \-\-otutabout and \-\-mothur_shared_out options,
respectively, and is recommended at least for large tables. The OTUs
are represented by the cluster centroids. Taxonomy information will be
included for the OTUs if available. Sample identifiers will be
extracted from the headers of all sequences in the input file. If the
header contains ';sample=abc123;' or ';barcodelabel=abc123;' or a
similar string somewhere, then the given sample identifier
(here 'abc123') will be used. The semicolon is not mandatory at the
beginning or end of the header. The sample identifier may contain any
printable character except semicolons. If no such sample label is
found, the identifier in the initial part of the header will be used,
but only letters, digits and underscores are allowed. OTU identifiers
will be extracted from the headers of the cluster centroid
sequences. If the header contains ';otu=def789;' or a similar string
somewhere, then the given OTU identifier (here 'def789') will be
used. The semicolon is not mandatory at the beginning or end of the
header. The OTU identifier may contain any printable character except
semicolons. If no such OTU label is found, the identifier in the
initial part of the header will be used, and all characters except
semicolons are allowed. Alternatively, OTU identifers can be generated
using the relabelling options (\-\-relabel, \-\-relabel_sha1 or
\-\-relabel_md5). Taxonomy information, if present, will also be
extracted from the headers of the centroid sequences. If the header
contains ';tax=Homo_sapiens;' or a similar string somewhere, then the
given taxonomy information (here 'Homo_sapiens') will be used. The
semicolon is not mandatory at the beginning or end of the header. The
taxonomy information may contain any printable character except
semicolons. If an OTU table in the biom version 2.1 HDF5 file format
is required, the biom utility may be used as described at
http://biom-format.org/documentation/biom_conversion.html.
.TP
.BI \-\-centroids \0filename
Output cluster centroid sequences to \fIfilename\fR, in fasta
format. The centroid is the sequence that seeded the cluster (i.e. the
first sequence of the cluster).
.TP
.BI \-\-clusterout_id
Add cluster identifier information to the output files
when using the \-\-consout and \-\-profile options.
.TP
.BI \-\-clusterout_sort
Sort output files by decreasing abundance
when using the \-\-consout, \-\-msaout and \-\-profile options.
.TP
.BI \-\-cluster_fast \0filename
Clusterize the fasta sequences in \fIfilename\fR, automatically sort
by decreasing sequence length beforehand.
.TP
.BI \-\-cluster_size \0filename
Clusterize the fasta sequences in \fIfilename\fR, automatically sort
by decreasing sequence abundance beforehand.
.TP
.BI \-\-cluster_smallmem \0filename
Clusterize the fasta sequences in \fIfilename\fR without automatically
modifying their order beforehand. Sequence are expected to be sorted
by decreasing sequence length, unless \-\-usersort is used.
.TP
.BI \-\-cluster_unoise \0filename
Perform denoising of the fasta sequences in \fIfilename\fR according
to the UNOISE version 3 algorithm by Robert Edgar, but without the
chimera removal step. The options \-\-minsize (default 8) and
\-\-unoise_alpha (default 2.0) may be specified. Chimera removal
(\fIde novo\fR) should be performed afterwards with
\-\-uchime3_denovo.
.TP
.BI \-\-clusters \0string
Output each cluster to a separate fasta file using the prefix
\fIstring\fR and a ticker (0, 1, 2, etc.) to construct the path and
filenames.
.TP
.BI \-\-consout \0filename
Output cluster consensus sequences to \fIfilename\fR. For each
cluster, a multiple alignment is computed, and a consensus sequence is
constructed by taking the majority symbol (nucleotide or gap) from
each column of the alignment. Columns containing a majority of gaps
are skipped, except for terminal gaps.
.TP
.B \-\-cons_truncate
This command is ignored. A warning is issued.
.\" .TP
.\" .B \-\-cons_truncate
.\" when using the \-\-consout option to build consensus sequences,
.\" do not ignore terminal gaps. That option skips terminal columns
.\" if they contain a majority of gaps, yielding shorter consensus
.\" sequences than when using \-\-consout alone.
.TP
.BI \-\-id \0real
Do not add the target to the cluster if the pairwise identity with the
centroid is lower than \fIreal\fR (value ranging from 0.0 to 1.0
included). The pairwise identity is defined as the number of (matching
columns) / (alignment length - terminal gaps). That definition can be
modified by \-\-iddef.
.TP
.BI \-\-iddef\~ "0|1|2|3|4"
Change the pairwise identity definition used in \-\-id. Values
accepted are:
.RS
.RS
.nr step 0 1
.IP \n[step]. 4
CD-HIT definition: (matching columns) / (shortest sequence length).
.IP \n+[step].
edit distance: (matching columns) / (alignment length).
.IP \n+[step].
edit distance excluding terminal gaps (same as \-\-id).
.IP \n+[step].
Marine Biological Lab definition counting each gap opening (internal
or terminal) as a single mismatch, whether or not the gap was
extended: 1.0 - [(mismatches + gap openings)/(longest sequence
length)]
.IP \n+[step].
BLAST definition, equivalent to \-\-iddef 1 in a context of global
pairwise alignment.
.RE
.RE
.TP
.BI \-\-minsize\~ "positive integer"
Specify the minimum abundance of sequences for denoising using
\-\-cluster_unoise. The default is 8.
.TP
.BI \-\-msaout \0filename
Output a multiple sequence alignment and a consensus sequence for each
cluster to \fIfilename\fR, in fasta format. Be warned that vsearch
computes center star multiple sequence alignments using a fast method
whose accuracy can decrease significantly when using low pairwise
identity thresholds. The consensus sequence is constructed by taking
the majority symbol (nucleotide or gap) from each column of the
alignment. Columns containing a majority of gaps are skipped, except
for terminal gaps.
.TP
.BI \-\-mothur_shared_out \0filename
Output an OTU table in the mothur 'shared' tab-separated plain text
format as described at http://www.mothur.org/wiki/Shared_file. The
format describes how a matrix containing the abundances of the OTUs in
the different samples is stored. The first line will start with the
strings 'label', 'group' and 'numOtus' and is followed by a list of
all OTU identifiers. The following lines, one for each sample, starts
with the string 'vsearch' followed by the sample identifier, the total
number of OTUs, and a list of abundances for each OTU in that sample,
in the order given on the first line. The OTU and sample identifiers
are extracted from the FASTA headers of the sequences. The OTUs are
represented by the cluster centroids. See the \-\-biomout option for
further details.
.TP
.BI \-\-otutabout \0filename
Output an OTU table in the classic tab-separated plain text format as
a matrix containing the abundances of the OTUs in the different
samples. The first line will start with the string '#OTU ID' and is
followed by a tab-separated list of all sample identifiers. The
following lines, one for each OTU, starts with the OTU identifier and
is followed by a tab-separated list of abundances for that OTU in each
sample, in the order given on the first line. The OTU and sample
identifiers are extracted from the FASTA headers of the sequences. The
OTUs are represented by the cluster centroids. An extra column is
added to the right of the table if taxonomy information is available
for at least one of the OTUs. This column will be labelled 'taxonomy'
and each row will then contain the taxonomy information extracted for
that OTU. See the \-\-biomout option for further details.
.TP
.BI \-\-profile \0filename
Output a sequence profile to a text file with the frequency of each
nucleotide in each position in the multiple alignment for each
cluster. There is a FASTA-like header line for each cluster, followed
by the profile information in a tab-separated format. The eight
columns are: position (0-based), consensus nucleotide, number of As,
number of Cs, number of Gs, number of Ts or Us, number of gap symbols,
and finally the total number of ambiguous nucleotide symbols (B, D, H,
K, M, N, R, S, Y, V or W). All numbers are integers.
.TP
.BI \-\-qmask\~ "none|dust|soft"
Mask regions in sequences using the
\fIdust\fR or the \fIsoft\fR methods, or do not mask
(\fInone\fR). Warning, when using \fIsoft\fR masking, clustering
becomes case sensitive. The default is to mask using \fIdust\fR.
.TP
.BI \-\-relabel \0string
Relabel sequence identifiers in the output files produced by
\-\-consout, \-\-profile and \-\-centroids options. Please see the
description of the same option under Chimera detection for details.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.BI \-\-relabel_md5
Relabel sequence identifiers in the output files produced by
\-\-consout, \-\-profile and \-\-centroids options. Please see the
description of the same option under Chimera detection for details.
.TP
.BI \-\-relabel_sha1
Relabel sequence identifiers in the output files produced by
\-\-consout, \-\-profile and \-\-centroids options. Please see the
description of the same option under Chimera detection for details.
.TP
.B \-\-sizein
Take into account the abundance annotations present in the input fasta
file (search for the pattern '[>;]size=\fIinteger\fR[;]' in sequence
headers).
.TP
.B \-\-sizeorder
When an amplicon is close to 2 or more centroids, both within the
distance specified with the \-\-id option, resolve the ambiguity by
clustering it with the centroid having the highest abundance, not
necessarily the closest one. The option only has effect when the value
specified with \-\-maxaccepts is higher than one. The \-\-sizeorder
option turns on what is sometimes referred to as abundance-based
greedy clustering (AGC), in contrast to the default distance-based
greedy clustering (DGC).
.TP
.B \-\-sizeout
Add abundance annotations to the output fasta files (add the pattern
';size=\fIinteger\fR;' to sequence headers). If \-\-sizein is
specified, abundance annotations are reported to output files, and
each cluster centroid receives a new abundance value corresponding to
the total abundance of the amplicons included in the cluster
(\-\-centroids option). If \-\-sizein is not specified, input
abundances are set to 1 for amplicons, and to the number of amplicons
per cluster for centroids.
.TP
.BI \-\-strand\~ "plus|both"
When comparing sequences with the cluster seed, check the \fIplus\fR
strand only (default) or check \fIboth\fR strands.
.TP
.BI \-\-uc \0filename
Output clustering results in \fIfilename\fR using a tab-separated
uclust-like format with 10 columns and 3 different type of entries (S,
H or C). Each fasta sequence in the input file can be either a cluster
centroid (S) or a hit (H) assigned to a cluster. Cluster records (C)
summarize information (size, centroid label) for each cluster. In the
context of clustering, the option \-\-uc_allhits has no effect on the
\-\-uc output. Column content varies with the type of entry (S, H or
C):
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
Record type: S, H, or C.
.IP \n+[step].
Cluster number (zero-based).
.IP \n+[step].
Centroid length (S), query length (H), or cluster size (C).
.IP \n+[step].
Percentage of similarity with the centroid sequence (H), or set to '*'
(S, C).
.IP \n+[step].
Match orientation + or - (H), or set to '*' (S, C).
.IP \n+[step].
Not used, always set to '*' (S, C) or to zero (H).
.IP \n+[step].
Not used, always set to '*' (S, C) or to zero (H).
.IP \n+[step].
set to '*' (S, C) or, for H, compact representation of the pairwise
alignment using the CIGAR format (Compact Idiosyncratic Gapped
Alignment Report): M (match), D (deletion) and I (insertion). The
equal sign '=' indicates that the query is identical to the centroid
sequence.
.IP \n+[step].
Label of the query sequence (H), or of the centroid sequence (S, C).
.IP \n+[step].
Label of the centroid sequence (H), or set to '*' (S, C).
.RE
.RE
.TP
.BI \-\-unoise_alpha\~ real
Specify the alpha parameter to the \-\-cluster_unoise command. The
default i 2.0.
.TP
.B \-\-usersort
When using \-\-cluster_smallmem, allow any sequence input order, not
just a decreasing length ordering.
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.TP
.B ...
Most searching options as well as score filtering, gap penalties and
masking also apply to clustering (see the Searching section for
definitions): \-\-alnout, \-\-blast6out, \-\-fastapairs, \-\-matched,
\-\-notmatched, \-\-maxaccept, \-\-maxreject, \-\-samout, \-\-userout,
\-\-userfields
.RE
.PP
.\" ----------------------------------------------------------------------------
Dereplication and rereplication options:
.RS
.TP 9
.BI \-\-derep_fulllength \0filename
Merge strictly identical sequences contained in
\fIfilename\fR. Identical sequences are defined as having the same
length and the same string of nucleotides (case insensitive, T and U
are considered the same).
.TP
.BI \-\-derep_prefix \0filename
Merge sequences with identical prefixes contained in \fIfilename\fR.
A short sequence identical to an initial segment (prefix) of another
sequence is considered a replicate of the longer sequence. If a
sequence is identical to the prefix of two or more longer sequences,
it is clustered with the shortest of them. If they are equally long,
it is clustered with the most abundant. Remaining ties are solved
using sequence headers and sequence input order. Sequence comparisons
are case insensitive, and T and U are considered identical.
.TP
.BI \-\-maxuniquesize\~ "positive integer"
Discard sequences with a post-dereplication abundance value greater
than \fIinteger\fR.
.TP
.BI \-\-minuniquesize\~ "positive integer"
Discard sequences with a post-dereplication abundance value smaller
than \fIinteger\fR.
.TP
.BI \-\-output \0filename
Write the dereplicated sequences to \fIfilename\fR, in fasta format
and sorted by decreasing abundance. Identical sequences receive the
header of the first sequence of their group. If \-\-sizeout is used,
the number of occurrences (i.e. abundance) of each sequence is
indicated at the end of their fasta header using the pattern
';size=\fIinteger\fR;'.
.TP
.BI \-\-relabel \0string
Please see the description of the same option under Chimera detection
for details.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.BI \-\-relabel_md5
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-relabel_sha1
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-rereplicate \0filename
Duplicate each sequence the number of times indicated by the abundance
of each sequence in the specified file. The sequence labels are
identical for the same sequence, unless \-\-relabel, \-\-relabel_sha1
or \-\-relabel_md5 is used to create unique labels. Output is written
to the file specified with the \-\-output option, in FASTA format. The
output file does not contain abundance information unless \-\-sizeout
is specified, in which case an abundance of 1 is used.
.TP
.B \-\-sizein
Take into account the abundance annotations present in the input fasta
file (search for the pattern '[>;]size=\fIinteger\fR[;]' in sequence
headers).
.TP
.B \-\-sizeout
Add abundance annotations to the output fasta file (add the pattern
';size=\fIinteger\fR;' to sequence headers).  If \-\-sizein is
specified, each unique sequence receives a new abundance value
corresponding to its total abundance (sum of the abundances of its
occurrences). If \-\-sizein is not specified, input abundances are set
to 1, and each unique sequence receives a new abundance value
corresponding to its number of occurrences in the input file.
.TP
.BI \-\-strand\~ "plus|both"
When searching for strictly identical sequences, check the \fIplus\fR
strand only (default) or check \fIboth\fR strands.
.TP
.BI \-\-topn\~ "positive integer"
Output only the top \fIinteger\fR sequences (i.e. the most abundant).
.TP
.BI \-\-uc \0filename
Output full-length or prefix-dereplication results in \fIfilename\fR
using a tab-separated uclust-like format with 10 columns and 3
different type of entries (S, H or C). Each fasta sequence in the
input file can be either a cluster centroid (S) or a hit (H) assigned
to a cluster. Cluster records (C) summarize information (size,
centroid label) for each cluster. In the context of dereplication, the
option \-\-uc_allhits has no effect on the \-\-uc output. Column
content varies with the type of entry (S, H or C):
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
Record type: S, H, or C.
.IP \n+[step].
Cluster number (zero-based).
.IP \n+[step].
Sequence length (S, H), or cluster size (C).
.IP \n+[step].
Percentage of similarity with the centroid sequence (H), or set to '*'
(S, C).
.IP \n+[step].
Match orientation + or - (H), or set to '*' (S, C).
.IP \n+[step].
Not used, always set to '*' (S, C) or 0 (H).
.IP \n+[step].
Not used, always set to '*' (S, C) or 0 (H).
.IP \n+[step].
Not used, always set to '*'.
.IP \n+[step].
Label of the query sequence (H), or of the centroid sequence (S, C).
.IP \n+[step].
Label of the centroid sequence (H), or set to '*' (S, C).
.RE
.RE
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
FASTA/FASTQ file processing options:
.RS
.PP
Analyse, shorten, filter, convert or merge sequences in FASTQ files,
or reverse complement sequences in FASTA or FASTQ files. The
\-\-fastq_chars command can be used to analyse FASTQ files to identify
the quality encoding and the range of quality score values used. To
convert between different FASTQ file variants, use the
\-\-fastq_convert command. Statistical analysis of the quality and
length of the sequences in a FASTQ file may be performed with the
\-\-fastq_stats, \-\-fastq_eestats, and \-\-fastq_eestats2
commands. Sequences may be shortened, filtered and converted by the
\-\-fastq_filter or \-\-fastx_filter commands. Paired-end reads can be
merged using the \-\-fastq_mergepairs command. Finally, the
\-\-fastx_revcomp command reverse-complements sequences.
.PP
.TP 9
.B \-\-eeout
When using \-\-fastq_filter or \-\-fastq_mergepairs, include the
number of expected errors (ee) in the sequence header of FASTQ and
FASTA files. This option is a synonym of the \-\-fastq_eeout option.
.TP
.BI \-\-eetabbedout \0filename
When specified with the \-\-fastq_mergepairs command, write statistics
with expected errors of each merged read to the given file. The file
is a tab separated file with four columns: The number of errors
expected in the forward read, the number of expected errors in the
reverse read, the number of observed errors in the forward read, and
the number of observed errors in the reverse read. The observed number
of errors are the number of differences in the overlap region of the
merged sequence relative to each of the reads in the pair.
.TP
.BI \-\-fastaout \0filename
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
write to the given FASTA-formatted file the sequences passing the
filter, or the merged sequences.
.TP
.BI \-\-fastaout_notmerged_fwd \0filename
When using \-\-fastq_mergepairs, write forward reads not merged to the
specified FASTA file.
.TP
.BI \-\-fastaout_notmerged_rev \0filename
When using \-\-fastq_mergepairs, write reverse reads not merged to the
specified FASTA file.
.TP
.BI \-\-fastaout_discarded \0filename
Write sequences that do not pass the filter of the \-\-fastq_filter or
\-\-fastx_filter command to the given FASTA-formatted file.
.TP
.B \-\-fastq_allowmergestagger
When using \-\-fastq_mergepairs, allow to merge staggered read
pairs. Staggered pairs are pairs where the 3' end of the reverse read
has an overhang to the left of the 5' end of the forward read. This
situation can occur when a very short fragment is sequenced. The 3'
overhang of the reverse read is not included in the merged
sequence. The opposite option is the \-\-fastq_nostagger option. The
default is to discard staggered pairs.
.TP
.BI \-\-fastq_ascii\~ "positive integer"
Define the ASCII character number used as the basis for the FASTQ
quality score. The default is 33, which is used by the Sanger /
Illumina 1.8+ FASTQ format (phred+33). The value 64 is used by the
Solexa, Illumina 1.3+ and Illumina 1.5+ formats (phred+64).
.TP
.BI \-\-fastq_asciiout\~ "positive integer"
When using \-\-fastq_convert, define the ASCII character number used
as the basis for the FASTQ quality score when writing FASTQ output
files. The default is 33.
.TP
.BI \-\-fastq_chars \0filename
Summarize the composition of sequence and quality strings contained in
the input FASTQ file. For each of the four DNA letters,
\-\-fastq_chars gives the number of occurrences of the letter, its
relative frequency and the length of the longest run of that
letter. For each character present in the quality strings,
\-\-fastq_chars gives the ASCII value of the character, its relative
frequency, and the number of times a \fIk\fR-mer of that character
appears at the end of quality strings. The length of the \fIk\fR-mer
can be set using \-\-fastq_tail (4 by default). The command
\-\-fastq_chars tries to automatically detect the quality encoding
(Solexa, Illumina 1.3+, Illumina 1.5+ or Illumina 1.8+/Sanger) by
analyzing the range of observed quality score values. In case of
success, \-\-fastq_chars suggests values for the \-\-fastq_ascii (33
or 64), \-\-fastq_qmin and \-\-fastq_qmax options to be used with the
other commands that require a FASTQ input file.
.TP
.BI \-\-fastq_convert \0filename
Convert between the different variants of the FASTQ file format. The
quality encoding of the input file must be specified with the
\-\-fastq_ascii option (either 33 or 64, the default is 33), and the
output quality encoding must be specified with the \-\-fastq_asciiout
option (default 33). The mimimum and maximum output quality scores may
be limited using the \-\-fastq_qminout and \-\-fastq_qmaxout
options. The output file is specified with the \-\-fastqout option.
.TP
.B \-\-fastq_eeout
When using \-\-fastq_filter or \-\-fastq_mergepairs, include the
number of expected errors (ee) in the sequence header of FASTQ and
FASTA files. This option is a synonym of the \-\-eeout option.
.TP
.BI \-\-fastq_eestats \0filename
Analyze a FASTQ file and report statistics on the distributions of
quality scores, error probabilities and expected accumulated
errors. The report, a table of 21 tab-separated columns, is written to
the file specified with the \-\-output option. The first column
corresponds to the position in the reads (Pos). The second and third
columns correspond to the number of reads (Reads) and percentage of
reads (PctRecs) that include this position. The remaining columns
include information about the distribution of quality scores in this
position (Q), error probabilities in this position (Pe), and finally
the expected number of accumulated errors from the beginning of the
reads and until the current position (EE). For each of the Q, Pe and
EE distributions, the following statistics are included: minimum value
(Min), lower quartile (Low), median (Med), mean (Mean), upper quartile
(Hi), and maximum value (Max). The quality encoding and the range of
quality values may be specified with \-\-fastq_ascii \-\-fastq_qmin
and \-\-fastq_qmax.
.TP
.BI \-\-fastq_eestats2 \0filename
Analyze the specified FASTQ file and report statistics on the number
of sequences that would be retained at a combination of selected
cutoffs for length truncation and maximum expected errors, that could
potentially be used as arguments to the \-\-fastq_trunclen and
\-\-fastq_maxee options to the \-\-fastq_filter command.  The result,
a table of two or more columns, is written to the file specified with
the \-\-output option. There is a line for each length truncation
cutoff. The first column on each line contains the selected truncation
length, while the following columns contain the number of sequences
and, in parenthesis, the percentage of sequences that would be
retained at the selected EE levels.  The truncation length cutoffs may
be specified with the \-\-length_cutoffs option and requires a list of
three comma-separated integers indicating the shortest cutoff, the
longest cutoff, and the increment between cutoffs. The longest cutoff
may be specified with a star (*) which indicates that the limit is
equal to the longest sequence in the input file. The default setting
is "50,*,50" meaning that truncation lengths of 50, 100, 150 and so on
up to the longest sequence length should be used.  The maximum
expected error (EE) cutoffs may be specified with the \-\-ee_cutoffs
option which requires a comma-separated list of floating point numbers
as its argument. The default setting is "0.5,1.0,2.0" that indicates
that expected error levels of 0.5, 1.0 and 2.0 should be used.
.TP
.BI \-\-fastq_filter \0filename
Shorten and/or filter sequences in the given FASTQ file. Similar to
the \-\-fastx_filter command, but works only on FASTQ files. See
\-\-fastx_filter for details.
.TP
.BI \-\-fastq_maxdiffs\~ "positive integer"
When using \-\-fastq_mergepairs, specify the maximum number of
non-matching nucleotides allowed in the overlap region. That option
has a strong influence on the merging success rate. The default
value is 10.
.TP
.BI \-\-fastq_maxee\~ real
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
discard sequences with more than the specified number of expected
errors.
.TP
.BI \-\-fastq_maxee_rate\~ real
When using \-\-fastq_filter or \-\-fastx_filter, discard sequences
with more than the specified number of expected errors per base.
.TP
.BI \-\-fastq_maxlen\~ "positive integer"
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
discard sequences with more than the specified number of bases.
.TP
.BI \-\-fastq_maxmergelen\~ "positive integer"
When using \-\-fastq_mergepairs, specify the maximum length of the
merged sequence. By default there is no limit.
.TP
.BI \-\-fastq_maxns\~ "positive integer"
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
discard sequences with more than the specified number of N's.
.TP
.BI \-\-fastq_mergepairs\0 filename
Merge paired-end sequence reads into one sequence. The forward reads
are specified as the argument to this option and the reverse reads are
specified with the \-\-reverse option. The merged sequences are output
to the file(s) specified with the \-\-fastaout or \-\-fastqout
options. The non-merged reads can be output to the files specified
with the \-\-fastaout_notmerged_fwd, \-\-fastaout_notmerged_rev,
\-\-fastqout_notmerged_fwd and \-\-fastqout_notmerged_rev
options. Statistics may be output to the file specified with the
\-\-eetabbedout option. Sequences are truncated as specified with the
\-\-fastq_truncqual option to remove low-quality bases in the 3'
end. Sequences shorter than specified with \-\-fastq_minlen (after
truncation) are discarded (1 by default). Sequences with too many
ambiguous bases (N's), as specified with the \-\-fastq_maxns are also
discarded (no limit by default). Staggered reads are not merged unless
the \-\-fastq_allowmergestagger option is specified. The minimum
length of the overlap region between the reads may be specified with
the \-\-fastq_minovlen option (default 10), and the overlap region may
not include more mismatches than specified with the \-\-fastq_maxdiffs
option (10 by default), otherwise the read pair is discarded.
Additional rules will avoid merging of reads that cannot be aligned
reliably and unambiguously. The mimimum and maximum length of the
merged sequence may be specified with the \-\-fastq_minmergelen and
\-\-fastq_maxmergelen options, respectively. Other relevant options
are: \-\-fastq_ascii, \-\-fastq_maxee, \-\-fastq_nostagger,
\-\-fastq_qmax, \-\-fastq_qmaxout, \-\-fastq_qmin, \-\-fastq_qminout,
and \-\-label_suffix.
.TP
.BI \-\-fastq_minlen\~ "positive integer"
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
discard sequences with less than the specified number of bases
(default 1).
.TP
.BI \-\-fastq_minmergelen\~ "positive integer"
When using \-\-fastq_mergepairs, specify the minimum length of the
merged sequence. The default is 1.
.TP
.BI \-\-fastq_minovlen\~ "positive integer"
When using \-\-fastq_mergepairs, specify the minimum overlap between
the merged reads. The default is 10.
.TP
.B \-\-fastq_nostagger
When using \-\-fastq_mergepairs, forbid the merging of staggered read
pairs. This is the default behaviour of \-\-fastq_mergepairs. To
change that behaviour, see the \-\-fastq_allowmergestagger option.
.TP
.BI \-\-fastq_qmax\~ "positive integer"
Specify the maximum quality score accepted when reading FASTQ
files. The default is 41, which is usual for recent Sanger/Illumina
1.8+ files.
.TP
.BI \-\-fastq_qmaxout\~ "positive integer"
When using \-\-fastq_convert, specify the maximum quality score used
when writing FASTQ files. The default is 41, which is usual for recent
Sanger/Illumina 1.8+ files. Older formats may use a maximum quality
score of 40.
.TP
.BI \-\-fastq_qmin\~ "positive integer"
Specify the minimum quality score accepted for FASTQ files. The
default is 0, which is usual for recent Sanger/Illumina 1.8+
files. Older formats may use scores between -5 and 2.
.TP
.BI \-\-fastq_qminout\~ "positive integer"
When using \-\-fastq_convert, specify the minimum quality score used
when writing FASTQ files. The default is 0, which is usual for
Sanger/Illumina 1.8+ files. Older versions of the format may use
scores between -5 and 2.
.TP
.BI \-\-fastq_stats \0filename
Analyze a FASTQ file and report the number of reads it contains. The
quality encoding and the range of quality values may be specified with
\-\-fastq_ascii \-\-fastq_qmin and \-\-fastq_qmax. That command
requires the \-\-log option and outputs the following detailed
statistics on read length, quality score, length vs. quality
distributions, and length / quality filtering:
.RS
.TP
Read length distribution:
.RS
.nr step 1 1
.IP \n[step]. 4
L: read length.
.IP \n+[step].
N: number of reads.
.IP \n+[step].
Pct: fraction of reads with this length.
.IP \n+[step]:
AccPct: fraction of reads with this length or longer.
.RE
.TP
Quality score distribution:
.RS
.nr step 1 1
.IP \n[step]. 4
ASCII: character encoding the quality score.
.IP \n+[step].
Q: Phred quality score.
.IP \n+[step].
Pe: probability of error associated with the quality score.
.IP \n+[step].
N: number of bases with this quality score.
.IP \n+[step].
Pct: fraction of bases with this quality score.
.IP \n+[step]:
AccPct: fraction of bases with this quality score or higher.
.RE
.TP
Length vs. quality distribution:
.RS
.nr step 1 1
.IP \n[step]. 4
L: position in reads (starting from position 2).
.IP \n+[step].
PctRecs: fraction of reads with at least this length.
.IP \n+[step].
AvgQ: average quality score over all reads up to this position.
.IP \n+[step].
P(AvgQ): error probability corresponding to AvgQ.
.IP \n+[step].
AvgP: average error probability.
.IP \n+[step]:
AvgEE: average expected error over all reads up to this position.
.IP \n+[step]:
Rate: growth rate of AvgEE between this position and position - 1.
.IP \n+[step]:
RatePct: Rate (as explained above) expressed as a percentage.
.RE
.TP
Effect of expected error and length filtering:
.RS
The first column indicates read lengths (\fIL\fR). The next four
columns indicate the number of reads that would be retained by the
\-\-fastq_filter command if the reads were truncated at length \fIL\fR
(option \-\-fastq_trunclen \fIL\fR) and filtered to have a maximum
expected error of 1.0, 0.5, 0.25 or 0.1 (with the option
\-\-fastq_maxee \fIfloat\fR). The last four columns indicate the
fraction of reads that would be retained by the \-\-fastq_filter
command using the same length and maximum expected error parameters.
.RE
.TP
Effect of minimum quality and length filtering:
.RS
The first column indicates read lengths (\fILen\fR). The next four
columns indicate the fraction of reads that would be retained by the
\-\-fastq_filter command if the reads were truncated at length
\fILen\fR (option \-\-fastq_trunclen \fILen\fR) or at the first
position with a quality \fIQ\fR below 5, 10, 15 or 20 (option
\-\-fastq_truncqual \fIQ\fR).
.RE
.RE
.TP
.BI \-\-fastq_stripleft\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, strip the specified
number of bases from the left end of the reads.
.TP
.BI \-\-fastq_stripright\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, strip the specified
number of bases from the right end of the reads.
.TP
.BI \-\-fastq_tail\~ "positive integer"
When using \-\-fastq_chars, count the number of times a series of
characters of length \fIk\fR appears at the end of quality strings. By
default, \fIk\fR = 4.
.TP
.BI \-\-fastq_truncee\~ real
When using \-\-fastq_filter or \-\-fastx_filter, truncate sequences so
that their total expected error is not higher than the specified
value.
.TP
.BI \-\-fastq_trunclen\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, truncate sequences to
the specified length. Shorter sequences are discarded.
.TP
.BI \-\-fastq_trunclen_keep\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, truncate sequences to
the specified length. Shorter sequences are not discarded.
.TP
.BI \-\-fastq_truncqual\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, truncate sequences
starting from the first base with the specified base quality score
value or lower.
.TP
.BI \-\-fastqout \0filename
When using \-\-fastq_filter, \-\-fastq_mergepairs or \-\-fastx_filter,
write to the given FASTQ-formatted file the sequences passing the
filter, or the merged sequences.
.TP
.BI \-\-fastqout_discarded \0filename
When using \-\-fastq_filter or \-\-fastx_filter, write sequences that
do not pass the filter to the given FASTQ-formatted file.
.TP
.BI \-\-fastqout_notmerged_fwd \0filename
When using \-\-fastq_mergepairs, write forward reads not merged to the
specified FASTQ file.
.TP
.BI \-\-fastqout_notmerged_rev \0filename
When using \-\-fastq_mergepairs, write reverse reads not merged to the
specified FASTQ file.
.TP
.BI \-\-fastx_filter \0filename
Shorten and/or filter the sequences in the given FASTA or FASTQ file
and output the remaining sequences to the FASTQ file specified with
the \-\-fastqout option and to the FASTA file specified with the
\-\-fastaout option. The discarded sequences are written to the files
specified with the \-\-fastaout_discarded and \-\-fastqout_discarded
options. The input format (FASTA or FASTQ) is automatically
detected. Output can not be written to FASTQ files if the input is in
FASTA format. Sequences may be shortened using the options
\-\-fastq_stripleft, \-\-fastq_stripright, \-\-fastq_truncee,
\-\-fastq_trunclen, \-\-fastq_trunclen_keep and
\-\-fastq_truncqual. The sequences may be filtered using the options
\-\-fastq_maxee, \-\-fastq_maxee_rate, \-\-fastq_maxlen,
\-\-fastq_maxns, \-\-fastq_minlen, \-\-fastq_trunclen, \-\-maxsize,
and \-\-minsize. If shortening results in an empty sequence, it is
discarded. The sequences are first shortened and then filtered based
on the remaining bases. If no shortening or filtering options are
given, all sequences are written to the output files, possibly after
conversion from FASTQ to FASTA format. The \-\-relabel option may be
used to relabel the output sequences. The \-\-eeout may be used to
output the expected number of errors in each sequence.
.TP
.BI \-\-fastx_revcomp \0filename
Reverse-complement the sequences in the given FASTA or FASTQ file to a
file specified with the \-\-fastaout and/or \-\-fastqout options. If
the input file is in FASTA format, the output can not be written back
to a FASTQ file due to missing base quality scores.
.TP
.BI \-\-label_suffix\~ string
When using \-\-fastx_revcomp or \-\-fastq_mergepairs, add the suffix
\fIstring\fR to sequence headers.
.TP
.BI \-\-maxsize\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, discard sequences
with an abundance higher than the specified value.
.TP
.BI \-\-minsize\~ "positive integer"
When using \-\-fastq_filter or \-\-fastx_filter, discard sequences
with an abundance lower than the specified value.
.TP
.BI \-\-output \0filename
When using \-\-fastq_eestats or \-\-fastq_eestats2, write tabulated
results to \fIfilename\fR. See \-\-fastq_eestats's and
\-\-fastq_eestats2's documentation for a complete description of the
table.
.TP
.B \-\-relabel_keep
When using \-\-relabel, keep the old identifier in the header after a
space.
.TP
.BI \-\-relabel \0string
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-relabel_md5
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-relabel_sha1
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-reverse \0filename
When using \-\-fastq_mergepairs, specify the FASTQ file containing
containing the reverse reads.
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
Masking options:
.RS
.PP
An input sequence can be composed of lower- or uppercase letters. When
soft masking is specified, lower case letters are treated as symbols
that should be masked. Otherwise the case of the input sequences is
ignored.
.br
Masking is performed by the commands for chimera detection
(uchime_denovo, uchime_ref), clustering (cluster_fast,
cluster_smallmem, cluster_size), masking (maskfasta, fastx_mask),
pairwise alignment (allpairs_global) and searching (search_exact,
usearch_global).
.br
Masking is usually specified with the \-\-qmask option, while the
\-\-dbmask option is used for the database sequences specified with
the \-\-db option with the \-\-usearch_global, \-\-search_exact and
\-\-uchime_ref commands.
.br
The argument to the \-\-qmask and \-\-dbmask option may be none, soft
or dust. If the argument is none, the no masking is performed. If the
argument is soft the lower case symbols are masked. Finally, if the
argument is dust, the sequence is masked using the DUST algorithm by
Tatusov and Lipman to mask low-complexity regions.
.br
If the \-\-hardmask option is specified, all masked regions are
converted to N's, otherwise masked regions are indicated by lower case
letters.
.br
If any sequence is masked, the masked version of the sequence (with
lower case letters or N's) is used in all output files. Otherwise the
sequence is unmodified. The exception is the sequences in the output
file specified with the \-\-uchimealns option, where the input
sequences are converted to upper case first and lower case letters
indicate disagreement between the aligned sequences.
.br
When a sequence region is masked, words in the region are not included
in the indices used in the heuristic search algorithm. In all other
aspects, the region is treated as other regions.
.br
Regions in sequences that are hardmasked (with N's) have a zero
alignment score and do not contribute to an alignment.
.br
Here are the results of combined masking options \-\-qmask (or
\-\-dbmask for database sequences) and \-\-hardmask, assuming each
input sequence contains both lower and uppercase nucleotides:
.PP
.ce 10 \# center the table (10 lines)
.TS
tab(:);
c c c
l l l.
qmask:hardmask:action
_
none:off:no masking, all symbols used, no change
none:on:no masking, all symbols used, no change
dust:off:masked symbols lowercased, rest uppercased
dust:on:masked symbols changed to Ns, rest unchanged
soft:off:lowercase symbols masked, no case changes
soft:on:lowercase symbols masked and changed to Ns
.TE
.ce 0 \# end of centering
.PP
.TP 9
.BI \-\-fastaout \0filename
Write the masked sequences to \fIfilename\fR, in fasta format. Applies
only to the \-\-fastx_mask command.
.TP
.BI \-\-fastqout \0filename
Write the masked sequences to \fIfilename\fR, in fastq format. Applies
only to the \-\-fastx_mask command.
.TP
.BI \-\-fastx_mask \0filename
Mask regions in sequences contained
in the specified fasta or fastq file. The default is to mask using
DUST (use \-\-qmask to modify that behavior). The output files
are specified with the \-\-fastaout and \-\-fastqout options. The
minimum and maximum percentage of unmasked residues may be specified
with the \-\-min_unmasked_pct and \-\-max_unmasked_pct options,
respectively.
.TP
.B \-\-hardmask
Symbols in masked regions are replaced by N's. The default is to
replace the masked regions by lower case letters.
.TP
.BI \-\-maskfasta \0filename
Mask regions in sequences contained
in the fasta file \fIfilename\fR. The default is to mask using
\fIdust\fR (use \-\-qmask to modify that behavior). The output file is
specified with the \-\-output option. This command is depreciated,
please use \-\-fastx_mask instead.
.TP
.BI \-\-max_unmasked_pct \0real
Discard sequences with more than the specified maximum percentage of
unmasked residues. Works only with \-\-fastx_mask.
.TP
.BI \-\-min_unmasked_pct \0real
Discard sequences with less than the specified minimum percentage of
unmasked residues. Works only with \-\-fastx_mask.
.TP
.BI \-\-output \0filename
Write the masked sequences to \fIfilename\fR, in fasta format. Applies
only to the \-\-mask_fasta command.
.TP
.BI \-\-qmask\~ "none|dust|soft"
If the argument is dust, mask regions in sequences using the
\fIDUST\fR algorithm that detects simple repeats and low-complexity
regions. This is the default. If the argument is soft, mask the lower
case letters in the input sequence. If the argument is none, do not
mask.
.RE
.PP
.\" ----------------------------------------------------------------------------
Pairwise alignment options:
.RS
.PP
The results of the n * (n - 1) / 2 pairwise alignments are written to
the result files specified with \-\-alnout, \-\-blast6out,
\-\-fastapairs \-\-matched, \-\-notmatched, \-\-samout, \-\-uc or
\-\-userout (see Searching section below). Specify either the
\-\-acceptall option to output all pairwise alignments, or specify an
identity level with \-\-id to discard weak alignments. Most other
accept/reject options (see Searching options below) may also be
used. Sequences are aligned on their \fIplus\fR strand only. Masking
is performed as usual and specified with \-\-qmask and \-\-hardmask.
.TP 9
.B \-\-acceptall
Write the results of all alignments to output files. This option
overrides all other accept/reject options (including \-\-id).
.TP
.BI \-\-allpairs_global \0filename
Perform optimal global pairwise alignments of all vs. all fasta
sequences contained in \fIfilename\fR. This command is multi-threaded.
.TP
.BI \-\-id \0real
Reject the sequence match if the pairwise identity is lower than
\fIreal\fR (value ranging from 0.0 to 1.0 included).
.TP
.BI \-\-threads\~ "positive integer"
Number of computation threads to use (1 to 256). The number of threads
should be lesser or equal to the number of available CPU cores. The
default is to use all available resources and to launch one thread
per logical core.
.TP
.BI \-\-uc \0filename
Output pairwise alignment results in \fIfilename\fR using a
tab-separated uclust-like format with 10 columns. Each sequence is
compared to all other sequences, and all hits (\-\-acceptall) or only
some hits (\-\-id \fIfloat\fR) are reported, with one pairwise
comparison per line:
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
Record type, always set to 'H'.
.IP \n+[step].
Ordinal number of the target sequence (based on input order, starting
from zero).
.IP \n+[step].
Sequence length.
.IP \n+[step].
Percentage of similarity with the target sequence.
.IP \n+[step].
Match orientation, always set to '+'.
.IP \n+[step].
Not used, always set to zero.
.IP \n+[step].
Not used, always set to zero.
.IP \n+[step].
Compact representation of the pairwise alignment using the CIGAR
format (Compact Idiosyncratic Gapped Alignment Report): M (match), D
(deletion) and I (insertion). The equal sign '=' indicates that the
query is identical to the centroid sequence.
.IP \n+[step].
Label of the query sequence.
.IP \n+[step].
Label of the target sequence.
.RE
.RE
.RE
.PP
.\" ----------------------------------------------------------------------------
Searching options:
.RS
.TP 9
.BI \-\-alnout \0filename
Write pairwise global alignments to \fIfilename\fR using a
human-readable format. Use \-\-rowlen to modify alignment
length. Output order may vary when using multiple threads.
.TP
.BI \-\-biomout \0filename
Write search results to an OTU table in the biom version 1.0 file
format. The query file contains the samples, while the database file
contains the OTUs. Sample and OTU identifiers are extracted from the
header of these sequences. See the \-\-biomout option in the
Clustering section for further details.
.TP
.BI \-\-blast6out \0filename
Write search results to \fIfilename\fR using a blast-like
tab-separated format of twelve fields (listed below), with one line
per query-target matching (or lack of matching if \-\-output_no_hits
is used). Warning, vsearch uses global pairwise alignments, not
blast's seed-and-extend algorithm. Therefore, some common blast output
values (alignment start and end, evalue, bit score) are reported
differently. Output order may vary when using multiple threads. A
similar output can be obtain with \-\-userout \fIfilename\fR and
\-\-userfields
query+target+id+alnlen+mism+opens+qlo+qhi+tlo+thi+evalue+bits.  A
complete list and description is available in the section 'Userfields'
of this manual.
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
\fIquery\fR: query label.
.IP \n+[step].
\fItarget\fR: target (database sequence) label. The field is set
to '*' if there is no alignment.
.IP \n+[step].
\fIid\fR: percentage of identity (real value ranging from 0.0 to
100.0). The percentage identity is defined as 100 * (matching columns)
/ (alignment length - terminal gaps). See fields id0 to id4 for other
definitions.
.IP \n+[step].
\fIalnlen\fR: length of the query-target alignment (number of
columns). The field is set to 0 if there is no alignment.
.IP \n+[step].
\fImism\fR: number of mismatches in the alignment (zero or positive
integer value).
.IP \n+[step].
\fIopens\fR: number of columns containing a gap opening (zero or
positive integer value).
.IP \n+[step].
\fIqlo\fR: first nucleotide of the query aligned with the
target. Always equal to 1 if there is an alignment, 0 otherwise (see
\fIqilo\fR to ignore initial gaps).
.IP \n+[step].
\fIqhi\fR: last nucleotide of the query aligned with the
target. Always equal to the length of the pairwise alignment, 0
otherwise (see \fIqihi\fR to ignore terminal gaps).
.IP \n+[step].
\fItlo\fR: first nucleotide of the target aligned with the
query. Always equal to 1 if there is an alignment, 0 otherwise (see
\fItilo\fR to ignore initial gaps).
.IP \n+[step].
\fIthi\fR: last nucleotide of the target aligned with the
query. Always equal to the length of the pairwise alignment, 0
otherwise (see \fItihi\fR to ignore terminal gaps).
.IP \n+[step].
\fIevalue\fR: expectancy-value (not computed for nucleotide
alignments). Always set to -1.
.IP \n+[step].
\fIbits\fR: bit score (not computed for nucleotide
alignments). Always set to 0.
.RE
.RE
.TP
.BI \-\-db \0filename
Compare query sequences (specified with \-\-usearch_global) to the
fasta-formatted target sequences contained in \fIfilename\fR, using
global pairwise alignment. Alternatively, the name of a preformatted
UDB database created using the makeudb_usearch command (see below) may
be specified.
.TP
.BI \-\-dbmask\~ "none|dust|soft"
Mask regions in the target database sequences using the dust method or
the soft method, or do not mask (none). Warning, when using soft
masking search commands become case sensitive. The default is to mask
using dust.
.TP
.BI \-\-dbmatched \0filename
Write database target sequences matching at least one query sequence
to \fIfilename\fR, in fasta format. If the option \-\-sizeout is used,
the number of queries that matched each target sequence is indicated
using the pattern ";size=\fIinteger\fR;".
.TP
.BI \-\-dbnotmatched \0filename
Write database target sequences not matching query sequences to
\fIfilename\fR, in fasta format.
.TP
.BI \-\-fastapairs \0filename
Write pairwise alignments of query and target sequences to
\fIfilename\fR, in fasta format.
.TP
.B \-\-fulldp
Dummy option for compatibility with usearch. To maximize search
sensitivity, \fBvsearch\fR uses a 8-way 16-bit SIMD vectorized full
dynamic programming algorithm (Needleman-Wunsch), whether or not
\-\-fulldp is specified.
.TP
.BI \-\-gapext \0string
Set penalties for a gap extension. See \-\-gapopen for a complete
description of the penalty declaration system. The default is to
initialize the six gap extending penalties using a penalty of 2 for
extending internal gaps and a penalty of 1 for extending terminal
gaps, in both query and target sequences (i.e. 2I/1E).
.TP
.BI \-\-gapopen \0string
Set penalties for a gap opening. A gap opening can occur in six
different contexts: in the query (Q) or in the target (T) sequence, at
the left (L) or right (R) extremity of the sequence, or inside the
sequence (I). Sequence symbols (Q and T) can be combined with location
symbols (L, I, and R), and numerical values to declare penalties for
all possible contexts: aQL/bQI/cQR/dTL/eTI/fTR, where abcdef are zero
or positive integers, and '/' is used as a separator.
.br
To simplify declarations, the location symbols (L, I, and R) can be
combined, the symbol (E) can be used to treat both extremities (L and
R) equally, and the symbols Q and T can be omitted to treat query and
target sequences equally. For instance, the default is to declare a
penalty of 20 for opening internal gaps and a penalty of 2 for opening
terminal gaps (left or right), in both query and target sequences
(i.e. 20I/2E). If only a numerical value is given, without any
sequence or location symbol, then the penalty applies to all gap
openings. To forbid gap-opening, an infinite penalty value can be
declared with the symbol '*'. To use \fBvsearch\fR as a semi-global
aligner, a null-penalty can be applied to the left (L) or right (R)
gaps.
.br
\fBvsearch\fR always initializes the six gap opening
penalties using the default parameters (20I/2E). The user is then free
to declare only the values he/she wants to modify. The \fIstring\fR is
scanned from left to right, accepted symbols are (0123456789/LIREQT*),
and later values override previous values.
.br
Please note that \fBvsearch\fR, in contrast to usearch, only allows
integer gap penalties. Because the lowest gap penalties are 0.5 by
default in usearch, all default scores and gap penalties in
\fBvsearch\fR have been doubled to maintain equivalent penalties and
to produce identical alignments.
.TP
.B \-\-hardmask
Mask sequence regions by replacing them with Ns instead of setting
them to lower case as is the default. For more information, please see
the Masking section.
.TP
.BI \-\-id \0real
Reject the sequence match if the pairwise identity is lower than
\fIreal\fR (value ranging from 0.0 to 1.0 included). The search
process sorts target sequences by decreasing number of \fIk\fR-mers
they have in common with the query sequence, using that information as
a proxy for sequence similarity. That efficient pre-filtering also
prevents pairwise alignments with weakly matching targets, as there
needs to be at least 6 shared \fIk\fR-mers to start the pairwise
alignment, and at least one out of every 16 \fIk\fR-mers from the
query needs to match the target. Consequently, using values lower than
\-\-id 0.5 is not likely to capture more weakly matching targets. The
pairwise identity is by default defined as the number of (matching
columns) / (alignment length - terminal gaps). That definition can be
modified by \-\-iddef.
.TP
.BI \-\-iddef\~ "0|1|2|3|4"
Change the pairwise identity definition used in \-\-id. Values
accepted are:
.RS
.RS
.nr step 0 1
.IP \n[step]. 4
CD-HIT definition: (matching columns) / (shortest sequence length).
.IP \n+[step].
edit distance: (matching columns) / (alignment length).
.IP \n+[step].
edit distance excluding terminal gaps (default definition for \-\-id).
.IP \n+[step].
Marine Biological Lab definition counting each gap opening (internal
or terminal) as a single mismatch, whether or not the gap was
extended: 1.0 - [(mismatches + gap openings)/(longest sequence
length)]
.IP \n+[step].
BLAST definition, equivalent to \-\-iddef 1 for global pairwise
alignments.
.RE
.PP
The option \-\-userfields accepts the fields id0 to id4, in addition
to the field id, to report the pairwise identity values corresponding
to the different definitions.
.RE
.TP
.BI \-\-idprefix\~ "positive integer"
Reject the sequence match if the first \fIinteger\fR nucleotides of
the target do not match the query.
.TP
.BI \-\-idsuffix\~ "positive integer"
Reject the sequence match if the last \fIinteger\fR nucleotides of the
target do not match the query.
.TP
.B \-\-leftjust
Reject the sequence match if the pairwise alignment begins with gaps.
.TP
.BI \-\-match\~ "integer"
Score assigned to a match (i.e. identical nucleotides) in the pairwise
alignment. The default value is 2.
.TP
.BI \-\-matched \0filename
Write query sequences matching database target sequences to
\fIfilename\fR, in fasta format.
.TP
.BI \-\-maxaccepts\~ "positive integer"
Maximum number of hits to accept before stopping the search. The
default value is 1. This option works in pair with \-\-maxrejects. The
search process sorts target sequences by decreasing number of
\fIk\fR-mers they have in common with the query sequence, using that
information as a proxy for sequence similarity. After pairwise
alignments, if the first target sequence passes the acceptation
criteria, it is accepted as best hit and the search process stops for
that query. If \-\-maxaccepts is set to a higher value, more hits are
accepted. If \-\-maxaccepts and \-\-maxrejects are both set to 0, the
complete database is searched.
.TP
.BI \-\-maxdiffs\~ "positive integer"
Reject the sequence match if the alignment contains at least
\fIinteger\fR substitutions, insertions or deletions.
.TP
.BI \-\-maxgaps\~ "positive integer"
Reject the sequence match if the alignment contains at least
\fIinteger\fR insertions or deletions.
.TP
.BI \-\-maxhits\~ "positive integer"
Maximum number of hits to show once the search is terminated (hits are
sorted by decreasing identity). Unlimited by default. That option
applies to \-\-alnout, \-\-blast6out, \-\-fastapairs, \-\-samout,
\-\-uc, or \-\-userout output files.
.TP
.BI \-\-maxid \0real
Reject the sequence match if the percentage of identity between the
two sequences is greater than \fIreal\fR.
.TP
.BI \-\-maxqsize\~ "positive integer"
Reject query sequences with an abundance greater than \fIinteger\fR.
.TP
.BI \-\-maxqt \0real
Reject if the query/target sequence length ratio is greater than
\fIreal\fR.
.TP
.BI \-\-maxrejects\~ "positive integer"
Maximum number of non-matching target sequences to consider before
stopping the search. The default value is 32. This option works in
pair with \-\-maxaccepts. The search process sorts target sequences by
decreasing number of \fIk\fR-mers they have in common with the query
sequence, using that information as a proxy for sequence
similarity. After pairwise alignments, if none of the first 32
examined target sequences pass the acceptation criteria, the search
process stops for that query (no hit). If \-\-maxrejects is set to a
higher value, more target sequences are considered. If \-\-maxaccepts
and \-\-maxrejects are both set to 0, the complete database is
searched.
.TP
.BI \-\-maxsizeratio \0real
Reject if the query/target abundance ratio is greater than
\fIreal\fR.
.TP
.BI \-\-maxsl \0real
Reject if the shorter/longer sequence length ratio is
greater than \fIreal\fR.
.TP
.BI \-\-maxsubs\~ "positive integer"
Reject the sequence match if the pairwise alignment contains more than
\fIinteger\fR substitutions.
.TP
.BI \-\-mid \0real
Reject the sequence match if the percentage of identity is lower than
\fIreal\fR (ignoring all gaps, internal and terminal).
.TP
.BI \-\-mincols\~ "positive integer"
Reject the sequence match if the alignment length is shorter than
\fIinteger\fR.
.TP
.BI \-\-minqt \0real
Reject if the query/target sequence length ratio is lower than
\fIreal\fR.
.TP
.BI \-\-minsizeratio \0real
Reject if the query/target abundance ratio is lower than \fIreal\fR.
.TP
.BI \-\-minsl \0real
Reject if the shorter/longer sequence length ratio is lower than
\fIreal\fR.
.TP
.BI \-\-mintsize\~ "positive integer"
Reject target sequences with an abundance lower than \fIinteger\fR.
.TP
.BI \-\-minwordmatches\~ "non-negative integer"
Minimum number of word matches required for a sequence to be
considered further. Default value is 12 for the default word length
8. For word lengths 3-15, the default minimum word matches are 18, 17,
16, 15, 14, 12, 11, 10, 9, 8, 7, 5 and 3, respectively. If the query
sequence has fewer unique words than the number specified, all words
in the query must match. If the argument is 0, no word matches are
required.
.TP
.BI \-\-mismatch\~ "integer"
Score assigned to a mismatch (i.e. different nucleotides) in the
pairwise alignment. The default value is -4.
.TP
.BI \-\-mothur_shared_out \0filename
Write search results to an OTU table in the mothur 'shared'
tab-separated plain text file format. The query file contains the
samples, while the database file contains the OTUs. Sample and OTU
identifiers are extracted from the header of these sequences. See the
\-\-otutabout option in the Clustering section for further details.
.TP
.BI \-\-notmatched \0filename
Write query sequences not matching database target sequences to
\fIfilename\fR, in fasta format.
.TP
.BI \-\-otutabout \0filename
Write search results to an OTU table in the classic tab-separated
plain text format. The query file contains the samples, while the
database file contains the OTUs. Sample and OTU identifiers are
extracted from the header of these sequences. See the
\-\-mothur_shared_out option in the Clustering section for further
details.
.TP
.B \-\-output_no_hits
Write both matching and non-matching queries to \-\-alnout,
\-\-blast6out, \-\-samout or \-\-userout output files. Non-matching
queries are labelled 'No hits' in \-\-alnout files.
.TP
.B \-\-pattern \fIstring\fR
This option is ignored. It is provided for compatibility with usearch.
.TP
.BI \-\-qmask\~ "none|dust|soft"
Mask regions in the query sequences
using the dust or the soft algorithms, or do not mask
(none). Warning, when using soft masking search commands
become case sensitive. The default is to mask using \fIdust\fR.
.TP
.BI \-\-query_cov \0real
Reject if the fraction of the query aligned to the target sequence is
lower than \fIreal\fR. The query coverage is computed as
(matches + mismatches) / query sequence length. Internal or terminal
gaps are not taken into account.
.TP
.B \-\-rightjust
Reject the sequence match if the pairwise alignment ends with gaps.
.TP
.BI \-\-rowlen\~ "positive integer"
Width of alignment lines in \-\-alnout output. The default value is
64. Set to 0 to eliminate wrapping.
.TP
.B \-\-samheader
Include header lines to the SAM file when \-\-samout is specified. The
header includes lines starting with @HD, @SQ and @PG, but no @RG lines
(see <https://github.com/samtools/hts-specs>). By default no header
line is written.
.TP
.BI \-\-samout \0filename
Write alignment results to \fIfilename\fR using the SAM format (a
tab-separated text file). When using the \-\-samheader option, the SAM
file starts with header lines. Each non-header line is a SAM record,
which represents either a query-target alignment or the absence of
match for a query (output order may vary when using multiple
threads). Each record contains 11 mandatory fields and optional fields
(see <https://github.com/samtools/hts-specs> for a complete
description of the format):
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
query sequence label.
.IP \n+[step].
combination of bitwise flags. Possible values are: 0 (top hit), 4 (no
hit), 16 (reverse-complemented hit), 256 (secondary hit, i.e. all hits
except the top hit).
.IP \n+[step].
target sequence label.
.IP \n+[step].
first position of a target aligned with the query (always 1 for global
pairwise alignments, 0 if there is no match).
.IP \n+[step].
mapping quality (ignored, always set to '*').
.IP \n+[step].
CIGAR string (set to '*' if there is no match).
.IP \n+[step].
name of the target sequence matching with the next read of the query
(for mate reads only, ignored and always set to '*').
.IP \n+[step].
position of the primary alignment of the next read of the query (for
mate reads only, ignored and always set to 0).
.IP \n+[step].
target sequence length (for multi-segment targets, ignored and always
set to 0).
.IP \n+[step].
query sequence (complete, not only the segment aligned to the target
as usearch does).
.IP \n+[step].
quality string (ignored, always set to '*').
.RE
.TP
Optional fields for query-target matches (number and order of fields
may vary):
.RS
.nr step 12 1
.IP \n[step]. 4
AS:i:? alignment score (i.e. percentage of identity).
.IP \n+[step].
XN:i:? next best alignment score (always set to 0).
.IP \n+[step].
XM:i:? number of mismatches.
.IP \n+[step].
XO:i:? number of gap openings (excluding terminal gaps).
.IP \n+[step].
XG:i:? number of gap extensions (excluding terminal gaps).
.IP \n+[step].
NM:i:? edit distance to the target (sum of XM and XG).
.IP \n+[step].
MD:Z:? string for mismatching positions.
.IP \n+[step].
YT:Z:UU string representing the alignment type.
.RE
.RE
.TP
.BI \-\-search_exact \0filename
Search for exact full-length matches to the query sequences contained
in \fIfilename\fR in the database of target sequences (\-\-db). Only
100% exact matches are reported and this command is much faster than
\-\-usearch_global. The \-\-id, \-\-maxaccepts and \-\-maxrejects
options are ignored, but the rest of the searching options may be
specified.
.TP
.B \-\-self
Reject the sequence match if the query and target labels are
identical.
.TP
.B \-\-selfid
Reject the sequence match if the query and target sequences are
strictly identical.
.TP
.B \-\-sizeout
Add abundance annotations to the output of the option \-\-dbmatched
(using the pattern ';size=\fIinteger\fR;'), to report the number of
queries that matched each target.
.TP
.BI \-\-strand\~ "plus|both"
When searching for similar sequences, check the \fIplus\fR strand only
(default) or check \fIboth\fR strands.
.TP
.BI \-\-target_cov \0real
Reject the sequence match if the fraction of the target sequence
aligned to the query sequence is lower than \fIreal\fR. The target
coverage is computed as (matches + mismatches) / target sequence
length.  Internal or terminal gaps are not taken into account.
.TP
.B \-\-top_hits_only
Only the top hits between the query and database sequence sets are
written to the output specified with the options \-\-alnout,
\-\-samout, \-\-userout, \-\-blast6out, \-\-uc, \-\-fastapairs,
\-\-matched or \-\-notmatched (but not \-\-dbmatched and
\-\-dbnotmatched). For each query, the top hit is the one presenting
the highest percentage of identity (see the \-\-iddef option to change
the way identity is measured). For a given query, if several top hits
present exactly the same percentage of identity, the number of hits
reported is controlled by the \-\-maxaccepts value (1 by default).
.TP
.BI \-\-uc \0filename
Output searching results in \fIfilename\fR using a tab-separated
uclust-like format with 10 columns. When using the \-\-search_exact
command, the table layout is the same than with the
\-\-allpairs_global. When using the \-\-usearch_global command, the
table present two different type of entries: hit (H) or no hit
(N). Each query sequence is compared to all other sequences, and the
best hit (\-\-maxaccept 1) or several hits (\-\-maxaccept > 1) are
reported (H). Output order may vary when using multiple
threads. Column content varies with the type of entry (H or N):
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
Record type: H, or N ('hit' or 'no hit').
.IP \n+[step].
Ordinal number of the target sequence (based on input order, starting
from zero). Set to '*' for N.
.IP \n+[step].
Sequence length. Set to '*' for N.
.IP \n+[step].
Percentage of similarity with the target sequence. Set to '*' for N.
.IP \n+[step].
Match orientation + or -. . Set to '.' for N.
.IP \n+[step].
Not used, always set to zero for H, or '*' for N.
.IP \n+[step].
Not used, always set to zero for H, or '*' for N.
.IP \n+[step].
Compact representation of the pairwise alignment using the CIGAR
format (Compact Idiosyncratic Gapped Alignment Report): M (match), D
(deletion) and I (insertion). The equal sign '=' indicates that the
query is identical to the centroid sequence. Set to '*' for N.
.IP \n+[step].
Label of the query sequence.
.IP \n+[step].
Label of the target centroid sequence. Set to '*' for N.
.RE
.RE
.TP
.B \-\-uc_allhits
When using the \-\-uc option, show all hits, not just the top hit for
each query.
.TP
.BI \-\-usearch_global \0filename
Compare target sequences (\-\-db) to the fasta-formatted query
sequences contained in \fIfilename\fR, using global pairwise
alignment.
.TP
.BI \-\-userfields \0string
When using \-\-userout, select and order the fields written to the
output file. Fields are separated by '+' (e.g. query+target+id). See
the 'Userfields' section for a complete list of fields.
.TP
.BI \-\-userout \0filename
Write user-defined tab-separated output to \fIfilename\fR. Select the
fields with the option \-\-userfields. Output order may vary when
using multiple threads. If \-\-userfields is empty or not present,
\fIfilename\fR is empty.
.TP
.BI \-\-weak_id \0real
Show hits with percentage of identity of at least \fIreal\fR, without
terminating the search. A normal search stops as soon as enough hits
are found (as defined by \-\-maxaccepts, \-\-maxrejects, and
\-\-id). As \-\-weak_id reports weak hits that are not deduced from
\-\-maxaccepts, high \-\-id values can be used, hence preserving both
speed and sensitivity. Logically, \fIreal\fR must be smaller than the
value indicated by \-\-id.
.TP
.BI \-\-wordlength\~ "positive integer"
Length of words (i.e. \fIk\fR-mers) for database indexing. The range
of possible values goes from 3 to 15, but values near 8 or 9 are
generally recommended. Longer words may reduce the sensitivity/recall
for weak similarities, but can increase precision. On the other hand,
shorter words may increase sensitivity or recall, but may reduce
precision. Computation time generally increases with shorter words and
decreases with longer words, but it increases again for very long
words. Memory requirements for a part of the index increase with a
factor of 4 each time word length increases by one nucleotide, and
this generally becomes significant for long words (12 or more). The
default value is 8.
.RE
.PP
.\" ----------------------------------------------------------------------------
Shuffling options:
.RS
Fasta entries in the input file are outputted in a pseudo-random
order.
.TP 9
.BI \-\-output \0filename
Write the shuffled sequences to \fIfilename\fR, in fasta format.
.TP
.BI \-\-randseed\~ "positive integer"
When shuffling sequence order, use \fIinteger\fR as seed. A given seed
always produces the same output order (useful for replicability). Set
to 0 to use a pseudo-random seed (default behavior).
.TP
.BI \-\-relabel \0string
Relabel sequences using the prefix \fIstring\fR and a ticker (1, 2, 3,
etc.) to construct the new headers. Use \-\-sizeout to conserve the
abundance annotations.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.B \-\-relabel_md5
Relabel sequences using the MD5 message digest algorithm applied to
each sequence. Former sequence headers are discarded. The sequence is
converted to upper case and U is replaced by T before the digest is
computed. The MD5 digest is a cryptographic hash function designed to
minimize the probability that two different inputs gives the same
output, even for very similar, but non-identical inputs. Still, there
is always a very small, but non-zero probability that two different
inputs give the same result. The MD5 digest generates a 128-bit
(16-byte) digest that is represented by 16 hexadecimal numbers (using
32 symbols among 0123456789abcdef). Use \-\-sizeout to conserve the
abundance annotations.
.TP
.B \-\-relabel_sha1
Relabel sequences using the SHA1 message digest algorithm applied to
each sequence. It is similar to the \-\-relabel_md5 option but uses
the SHA1 algorithm instead of the MD5 algorithm. The SHA1 digest
generates a 160-bit (20-byte) result that is represented by 20
hexadecimal numbers (40 symbols). The probability of a collision (two
non-identical sequences having the same digest) is smaller for the
SHA1 algorithm than it is for the MD5 algorithm. Use \-\-sizeout to
conserve the abundance annotations.
.TP
.B \-\-sizeout
When using \-\-relabel, \-\-relabel_md5 or \-\-relabel_sha1, preserve
and report abundance annotations to the output fasta file (using the
pattern ';size=\fIinteger\fR;').
.TP
.BI \-\-shuffle \0filename
Pseudo-randomly shuffle the order of sequences contained in
\fIfilename\fR.
.TP
.BI \-\-topn\~ "positive integer"
Output only the first \fIinteger\fR sequences after pseudo-random
reordering.
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
Sorting options:
.RS
Fasta entries are sorted by decreasing abundance (\-\-sortbysize) or
sequence length (\-\-sortbylength). To obtain a stable sorting order,
ties are sorted by decreasing abundance and label increasing
alpha-numerical order (\-\-sortbylength), or just by label increasing
alpha-numerical order (\-\-sortbysize). Label sorting assumes that all
sequences have unique labels. The same applies to the automatic
sorting performed during chimera checking (\-\-uchime_denovo),
dereplication (\-\-derep_fulllength), and clustering (\-\-cluster_fast
and \-\-cluster_size).
.PP
.TP 9
.BI \-\-maxsize\~ "positive integer"
When using \-\-sortbysize, discard sequences with an abundance value
greater than \fIinteger\fR.
.TP
.BI \-\-minsize\~ "positive integer"
When using \-\-sortbysize, discard sequences with an abundance value
smaller than \fIinteger\fR.
.TP
.BI \-\-output \0filename
Write the sorted sequences to \fIfilename\fR, in fasta format.
.TP
.BI \-\-relabel \0string
Please see the description of the same option under Chimera detection
for details.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.BI \-\-relabel_md5
Please see the description of the same option under Chimera detection
for details.
.TP
.BI \-\-relabel_sha1
Please see the description of the same option under Chimera detection
for details.
.TP
.B \-\-sizeout
When using \-\-relabel, report abundance annotations to the output
fasta file (using the pattern ';size=\fIinteger\fR;').
.TP
.BI \-\-sortbylength \0filename
Sort by decreasing length the sequences contained in
\fIfilename\fR. See the general options \-\-minseqlength and
\-\-maxseqlength to eliminate short and long sequences.
.TP
.BI \-\-sortbysize \0filename
Sort by decreasing abundance the sequences contained in \fIfilename\fR
(missing abundance values are assumed to be ';size=1'). See the
options \-\-minsize and \-\-maxsize to eliminate rare and dominant
sequences.
.TP
.BI \-\-topn\~ "positive integer"
Output only the top \fIinteger\fR sequences (i.e. the longest or the
most abundant).
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
Subsampling options:
.RS
Subsampling randomly extracts a certain number or a certain percentage
of the sequences in the input file. If the \-\-sizein option is in
effect, the abundances of the input sequences is taken into account
and the sampling is performed as if the input sequences were
rereplicated, subsampled and dereplicated before being written to the
output file. The extraction is performed as a random sampling with a
uniform distribution among the input sequences and is performed
without replacement. The input file is specified with
\-\-fastx_subsample option, the output files are specified with the
\-\-fastaout and \-\-fastqout options and the amount of sequences to
be sampled is specified with the \-\-sample_pct or \-\-sample_size
options. The sequences not sampled may be written to files specified
with the options \-\-fasta_discarded and \-\-fastq_discarded. The
\-\-fastq_ascii, \-\-fastq_qmin and \-\-fastq_qmax options are also
available.
.PP
.TP 9
.BI \-\-fastaout \0filename
Write the sampled sequences to \fIfilename\fR, in fasta format.
.TP
.BI \-\-fastaout_discarded \0filename
Write the sequences not sampled to \fIfilename\fR, in fasta format.
.TP
.BI \-\-fastq_ascii\~ "positive integer"
Define the ASCII character number used as the basis for the FASTQ
quality score. The default is 33, which is used by the Sanger /
Illumina 1.8+ FASTQ format (phred+33). The value 64 is used by the
Solexa, Illumina 1.3+ and Illumina 1.5+ formats (phred+64).
.TP
.BI \-\-fastq_qmax\~ "positive integer"
Specify the maximum quality score accepted when reading FASTQ
files. The default is 41, which is usual for recent Sanger/Illumina
1.8+ files.
.TP
.BI \-\-fastq_qmin\~ "positive integer"
Specify the minimum quality score accepted for FASTQ files. The
default is 0, which is usual for recent Sanger/Illumina 1.8+
files. Older formats may use scores between -5 and 2.
.TP
.BI \-\-fastqout \0filename
Write the sampled sequences to \fIfilename\fR, in fastq
format. Requires input in fastq format.
.TP
.BI \-\-fastqout_discarded \0filename
Write the sequences not sampled to \fIfilename\fR, in fastq
format. Requires input in fastq format.
.TP
.BI \-\-fastx_subsample \0filename
Perform subsampling from the sequences in the specified input file
that is in FASTA or FASTQ format.
.TP
.BI \-\-randseed\~ "positive integer"
Use \fIinteger\fR as a seed for the pseudo-random generator. A given
seed always produces the same output, which is useful for
replicability. Set to 0 to use a pseudo-random seed (default
behavior).
.TP
.BI \-\-relabel \0string
Relabel sequences using the prefix \fIstring\fR and a ticker (1, 2, 3,
etc.) to construct the new headers. Use \-\-sizeout to conserve the
abundance annotations.
.TP
.B \-\-relabel_keep
When relabelling, keep the old identifier in the header after a space.
.TP
.B \-\-relabel_md5
Relabel sequences using the MD5 message digest algorithm applied to
each sequence. Former sequence headers are discarded. The sequence is
converted to upper case and U is replaced by T before the digest is
computed. The MD5 digest is a cryptographic hash function designed to
minimize the probability that two different inputs give the same
output, even for very similar, but non-identical inputs. Still, there
is always a very small, but non-zero probability that two different
inputs give the same result. The MD5 digest generates a 128-bit
(16-byte) digest that is represented by 16 hexadecimal numbers (using
32 symbols among 0123456789abcdef). Use \-\-sizeout to conserve the
abundance annotations.
.TP
.B \-\-relabel_sha1
Relabel sequences using the SHA1 message digest algorithm applied to
each sequence. It is similar to the \-\-relabel_md5 option but uses
the SHA1 algorithm instead of the MD5 algorithm. The SHA1 digest
generates a 160-bit (20-byte) result that is represented by 20
hexadecimal numbers (40 symbols). The probability of a collision (two
non-identical sequences having the same digest) is smaller for the
SHA1 algorithm than it is for the MD5 algorithm. Use \-\-sizeout to
conserve the abundance annotations.
.TP
.BI \-\-sample_pct\~ "real"
Subsample the given percentage of the input sequences. Accepted values
range from 0.0 to 100.0.
.TP
.BI \-\-sample_size\~ "positive integer"
Extract the given number of sequences.
.TP
.B \-\-sizein
Take the abundance information of the input file into account,
otherwise the abundance of each sequence is considered to be 1.
.TP
.B \-\-sizeout
Write abundance information to the output file.
.TP
.B \-\-xsize
Strip abundance information from the headers when writing the output
file.
.RE
.PP
.\" ----------------------------------------------------------------------------
UDB options:
.RS
Databases to be used with the \-\-usearch_global command may be
prepared from FASTA files and stored to a binary UDB formatted file in
order to speed up searching. This may be worthwhile when searching a
large database repeatedly. The sequences are indexed and stored in a
way that can be quickly loaded into memory. The commands and options
below can be used to create and inspect UDB files. An UDB file may be
specified with the \-\-db option instead of a FASTA formatted file
with the \-\-usearch_global command.
.PP
.TP 9
.BI \-\-dbmask\~ "none|dust|soft"
Specify the sequence masking method used with the \-\-makeudb_usearch
command, either none, dust or soft. No masking is performed when none
is specified. When dust is specified, the DUST algorithm will be used
for masking low complexity regions (short repeats and skewed
composition). Lower case letters in the input file will be masked when
soft is specified (soft masking).
.TP
.B \-\-hardmask
Mask sequences by replacing letters with N for the \-\-makeudb_usearch
command. The default is to use lower case letters (soft masking).
.TP
.BI \-\-makeudb_usearch \0filename
Create an UDB database file from the FASTA-formatted sequences in the
file with the given \fIfilename\fR. The UDB database is written to the
file specified with the \-\-output option.
.TP
.BI \-\-output \0filename
Specify the \fIfilename\fR of a FASTA or UDB output file for the
\-\-makeudb_usearch or the \-\-udb2fasta command, respectively.
.TP
.BI \-\-udb2fasta \0filename
Read the UDB database in the file with the given \fIfilename\fR and
output the sequences in FASTA format in the file specified by the
\-\-output option.
.TP
.BI \-\-udbinfo \0filename
Show information about the UDB database in the file with the given
\fIfilename\fR.
.TP
.BI \-\-udbstats \0filename
Report statistics about the indexed words in the UDB database in the
file with the given \fIfilename\fR.
.TP
.BI \-\-wordlength\~ "positive integer"
Specify the length of the words to be used when creating the UDB
database index using the \-\-makeudb_usearch command. Valid numbers
range from 3 to 15. The default is 8.
.RE
.PP
.\" ----------------------------------------------------------------------------
Userfields (fields accepted by the \-\-userfields option):
.RS
.TP 9
.B aln
Print a string of M (match), D (delete, i.e. a gap in the query) and I
(insert, i.e. a gap in the target) representing the pairwise
alignment. Empty field if there is no alignment.
.TP
.B alnlen
Print the length of the query-target alignment (number of
columns). The field is set to 0 if there is no alignment.
.TP
.B bits
Bit score (not computed for nucleotide alignments). Always set to 0.
.TP
.B caln
Compact representation of the pairwise alignment using the CIGAR
format (Compact Idiosyncratic Gapped Alignment Report): M (match), D
(deletion) and I (insertion). Empty field if there is no alignment.
.TP
.B evalue
E-value (not computed for nucleotide alignments). Always set to -1.
.TP
.B exts
Number of columns containing a gap extension (zero or positive integer
value).
.TP
.B gaps
Number of columns containing a gap (zero or positive integer value).
.TP
.B id
Percentage of identity (real value ranging from 0.0 to 100.0). The
percentage identity is defined as 100 * (matching columns) /
(alignment length - terminal gaps).
.TP
.B id0
CD-HIT definition of the percentage of identity (real value ranging
from 0.0 to 100.0) using the length of the shortest sequence in the
pairwise alignment as denominator: 100 * (matching columns) /
(shortest sequence length).
.TP
.B id1
The percentage of identity (real value ranging from 0.0 to 100.0) is
defined as the edit distance: 100 * (matching columns) / (alignment
length).
.TP
.B id2
The percentage of identity (real value ranging from 0.0 to 100.0) is
defined as the edit distance, excluding terminal gaps. The field id2
is an alias for the field id.
.TP
.B id3
Marine Biological Lab definition of the percentage of identity (real
value ranging from 0.0 to 100.0), counting each gap opening (internal
or terminal) as a single mismatch, whether or not the gap was
extended, and using the length of the longest sequence in the pairwise
alignment as denominator: 100 * (1.0 - [(mismatches + gaps) / (longest
sequence length)]).
.TP
.B id4
BLAST definition of the percentage of identity (real value ranging
from 0.0 to 100.0), equivalent to \-\-iddef 1 in a context of global
pairwise alignment. The field id4 is always equal to the field id1.
.TP
.B ids
Number of matches in the alignment (zero or positive integer value).
.TP
.B mism
Number of mismatches in the alignment (zero or positive integer
value).
.TP
.B opens
Number of columns containing a gap opening (zero or positive integer
value).
.TP
.B pairs
Number of columns containing only nucleotides. That value corresponds
to the length of the alignment minus the gap-containing columns (zero
or positive integer value).
.TP
.B pctgaps
Number of columns containing gaps expressed as a percentage of the
alignment length (real value ranging from 0.0 to 100.0).
.TP
.B pctpv
Percentage of positive columns. When working with nucleotide
sequences, this is equivalent to the percentage of matches (real value
ranging from 0.0 to 100.0).
.TP
.B pv
Number of positive columns. When working with nucleotide sequences,
this is equivalent to the number of matches (zero or positive integer
value).
.TP
.B qcov
Fraction of the query sequence that is aligned with the target
sequence (real value ranging from 0.0 to 100.0). The query coverage is
computed as 100.0 * (matches + mismatches) / query sequence length.
Internal or terminal gaps are not taken into account. The field is set
to 0.0 if there is no alignment.
.TP
.B qframe
Query frame (-3 to +3). That field only concerns coding sequences and
is not computed by \fBvsearch\fR. Always set to +0.
.TP
.B qhi
Last nucleotide of the query aligned with the target. Always equal to
the length of the pairwise alignment, 0 otherwise (see \fIqihi\fR to
ignore terminal gaps).
.TP
.B qihi
Last nucleotide of the query aligned with the target (ignoring
terminal gaps). Nucleotide numbering starts from 1. The field is set
to 0 if there is no alignment.
.TP
.B qilo
First nucleotide of the query aligned with the target (ignoring
initial gaps). Nucleotide numbering starts from 1. The field is set to
0 if there is no alignment.
.TP
.B ql
Query sequence length (positive integer value). The field is set to 0
if there is no alignment.
.TP
.B qlo
First nucleotide of the query aligned with the target. Always equal to
1 if there is an alignment, 0 otherwise (see \fIqilo\fR to ignore
initial gaps).
.TP
.B qrow
Print the sequence of the query segment as seen in the pairwise
alignment (i.e. with gap insertions if need be). Empty field if there
is no alignment.
.TP
.B qs
Query segment length. Always equal to query sequence length.
.\" The meaning of that field is not clear to us. 
.TP
.B qstrand
Query strand orientation (+ or - for nucleotide sequences). Empty
field if there is no alignment.
.TP
.B query
Query label.
.TP
.B raw
Raw alignment score (negative, null or positive integer value). The
score is the sum of match rewards minus mismatch penalties, gap
openings and gap extensions. The field is set to 0 if there is no
alignment.
.TP
.B target
Target label. The field is set to '*' if there is no alignment.
.TP
.B tcov
Fraction of the target sequence that is aligned with the query
sequence (real value ranging from 0.0 to 100.0). The target coverage
is computed as 100.0 * (matches + mismatches) / target sequence
length.  Internal or terminal gaps are not taken into account.  The
field is set to 0.0 if there is no alignment.
.TP
.B tframe
Target frame (-3 to +3). That field only concerns coding sequences and
is not computed by \fBvsearch\fR. Always set to +0.
.TP
.B thi
Last nucleotide of the target aligned with the query. Always equal to
the length of the pairwise alignment, 0 otherwise (see \fItihi\fR to
ignore terminal gaps).
.TP
.B tihi
Last nucleotide of the target aligned with the query (ignoring
terminal gaps). Nucleotide numbering starts from 1. The field is set
to 0 if there is no alignment.
.TP
.B tilo
First nucleotide of the target aligned with the query (ignoring
initial gaps). Nucleotide numbering starts from 1. The field is set to
0 if there is no alignment.
.TP
.B tl
Target sequence length (positive integer value). The field is set to 0
if there is no alignment.
.TP
.B tlo
First nucleotide of the target aligned with the query. Always equal to
1 if there is an alignment, 0 otherwise (see \fItilo\fR to ignore
initial gaps).
.TP
.B trow
Print the sequence of the target segment as seen in the pairwise
alignment (i.e. with gap insertions if need be). Empty field if there
is no alignment.
.TP
.B ts
Target segment length. Always equal to target sequence length. The
field is set to 0 if there is no alignment.
.TP
.B tstrand
Target strand orientation (+ or - for nucleotide sequences). Always
set to '+', so reverse strand matches have tstrand '+' and qstrand
'-'. Empty field if there is no alignment.
.RE
.PP
.\" ============================================================================
.SH DELIBERATE CHANGES
If you are a usearch user, our objective is to make you feel at
home. That's why \fBvsearch\fR was designed to behave like usearch, to
some extent. Like any complex software, usearch is not free from
quirks and inconsistencies. We decided not to reproduce some of them,
and for complete transparency, to document here the deliberate changes
we made.
.PP
During a search with usearch, when using the options \-\-blast6out and
\-\-output_no_hits, for queries with no match the number of fields
reported is 13, where it should be 12. This is corrected in
\fBvsearch\fR.
.PP
The field raw of the \-\-userfields option is not informative in
usearch. This is corrected in \fBvsearch\fR.
.PP
The fields qlo, qhi, tlo, thi now have counterparts (qilo, qihi, tilo,
tihi) reporting alignment coordinates ignoring terminal gaps.
.PP
In usearch, when using the option \-\-output_no_hits, queries that
receive no match are reported in \-\-blast6out file, but not in the
alignment output file. This is corrected in \fBvsearch\fR.
.PP
\fBvsearch\fR introduces a new \-\-cluster_size command that sorts
sequences by decreasing abundance before clustering.
.PP
\fBvsearch\fR reintroduces \-\-iddef alternative pairwise identity
definitions that were removed from usearch.
.PP
\fBvsearch\fR extends the \-\-topn option to sorting commands.
.PP
\fBvsearch\fR extends the \-\-sizein option to dereplication
(\-\-derep_fulllength) and clustering (\-\-cluster_fast).
.PP
\fBvsearch\fR treats T and U as identical nucleotides during
dereplication.
.PP
\fBvsearch\fR sorting is stabilized by using sequence abundances or
sequences labels as secondary or tertiary keys.
.PP
\fBvsearch\fR by default uses the DUST algorithm for masking
low-complexity regions. Masking behavior is also slightly changed to
be more consistent.
.PP
.\" ============================================================================
.SH NOVELTIES
\fBvsearch\fR introduces new commands and new options not present in
usearch 7. They are described in the 'Options' section of this
manual. Here is a short list:
.RS
.IP - 2
uchime2_denovo, uchime3_denovo, alignwidth, borderline, fasta_score
(chimera checking)
.IP -
cluster_size, cluster_unoise, clusterout_id, clusterout_sort, profile
(clustering)
.IP -
fasta_width, gzip_decompress, bzip2_decompress (general option)
.IP -
iddef (clustering, pairwise alignment, searching)
.IP -
maxuniquesize (dereplication)
.IP -
relabel_md5 and relabel_sha1 (chimera detection, dereplication, FASTQ
processing, shuffling, sorting)
.IP -
shuffle (shuffling)
.IP -
fastq_eestats, fastq_eestats2, fastq_maxlen, fastq_truncee (FASTQ
processing)
.IP -
fastaout_discarded, fastqout_discarded (subsampling)
.IP -
rereplicate (dereplication/rereplication)
.RE
.PP
.\" ============================================================================
.SH EXAMPLES
.PP
Align all sequences in a database with each other and output all
pairwise alignments:
.PP
.RS
\fBvsearch\fR \-\-allpairs_global \fIdatabase.fas\fR \-\-alnout
\fIresults.aln\fR \-\-acceptall
.RE
.PP
Check for the presence of chimeras (\fIde novo\fR); parents should be
at least 1.5 times more abundant than chimeras. Output non-chimeric
sequences in fasta format (no wrapping):
.PP
.RS
\fBvsearch\fR \-\-uchime_denovo \fIqueries.fas\fR \-\-abskew 1.5
\-\-nonchimeras \fIresults.fas\fR \-\-fasta_width 0
.RE
.PP
Cluster with a 97% similarity threshold, collect cluster centroids,
and write cluster descriptions using a uclust-like format:
.PP
.RS
\fBvsearch\fR \-\-cluster_fast \fIqueries.fas\fR \-\-id 0.97
\-\-centroids \fIcentroids.fas\fR \-\-uc \fIclusters.uc\fR
.RE
.PP
Dereplicate the sequences contained in \fIqueries.fas\fR, take into
account the abundance information already present, write unwrapped
fasta sequences to \fIqueries_unique.fas\fR with the new abundance
information, discard all sequences with an abundance of 1:
.PP
.RS
\fBvsearch\fR \-\-derep_fulllength \fIqueries.fas\fR \-\-sizein
\-\-fasta_width 0 \-\-sizeout \-\-output \fIqueries_unique.fas\fR
\-\-minuniquesize 2
.RE
.PP
Mask simple repeats and low complexity regions in the input fasta file
with the DUST algorithm (masked regions are lowercased), and write the
results to the output file:
.PP
.RS
\fBvsearch\fR \-\-maskfasta \fIqueries.fas\fR \-\-qmask dust
\-\-output \fIqueries_masked.fas\fR
.RE
.PP
Search queries in a reference database, with a 80%-similarity
threshold, take terminal gaps into account when calculating pairwise
similarities, output pairwise alignments:
.PP
.RS
\fBvsearch\fR \-\-usearch_global \fIqueries.fas\fR \-\-db
\fIreferences.fas\fR \-\-id 0.8 \-\-iddef 1 \-\-alnout
\fIresults.aln\fR
.RE
.PP
Search a sequence dataset against itself (ignore self hits), get all
matches with at least 60% similarity, and collect results in a
blast-like tab-separated format. Accept an unlimited number of hits
(\-\-maxaccepts 0), and compare each query to all other sequences,
including unlikely candidates (\-\-maxrejects 0):
.PP
.RS
\fBvsearch\fR \-\-usearch_global \fIqueries.fas\fR \-\-db
\fIqueries.fas\fR \-\-self \-\-id 0.6 \-\-blast6out
\fIresults.blast6\fR \-\-maxaccepts 0 \-\-maxrejects 0
.RE
.PP
Shuffle the input fasta file (change the order of sequences) in a
repeatable fashion (fixed seed), and write unwrapped fasta sequences
to the output file:
.PP
.RS
\fBvsearch\fR \-\-shuffle \fIqueries.fas\fR \-\-output
\fIqueries_shuffled.fas\fR \-\-randseed 13 \-\-fasta_width 0
.RE
.PP
Sort by decreasing abundance the sequences contained in
\fIqueries.fas\fR (using the 'size=\fIinteger\fR' information),
relabel the sequences while preserving the abundance information (with
\-\-sizeout), keep only sequences with an abundance equal to or
greater than 2:
.PP
.RS
\fBvsearch\fR \-\-sortbysize \fIqueries.fas\fR \-\-output
\fIqueries_sorted.fas\fR \-\-relabel sampleA_ \-\-sizeout \-\-minsize
2
.RE
.PP
.\" 
.\" ============================================================================
.SH AUTHORS
Implementation by Torbjørn Rognes and Tomás Flouri, documentation by
Frédéric Mahé.
.PP
.\" ============================================================================
.SH CITATION
.PP
Rognes T, Flouri T, Nichols B, Quince C, Mahé F. (2016)
VSEARCH: a versatile open source tool for metagenomics.
\fIPeerJ\fR 4:e2584 doi: 10.7717/peerj.2584
<https://doi.org/10.7717/peerj.2584>
.PP
.\" ============================================================================
.SH REPORTING BUGS
Submit suggestions and bug-reports at
<https://github.com/torognes/vsearch/issues>, send a pull request on
<https://github.com/torognes/vsearch>, or compose a friendly or
curmudgeont e-mail to Torbjørn Rognes <torognes@ifi.uio.no>.
.PP
.\" ============================================================================
.SH AVAILABILITY
Source code and binaries are available at
<https://github.com/torognes/vsearch>.
.PP
.\" ============================================================================
.SH COPYRIGHT
Copyright (C) 2014-2017, Torbjørn Rognes, Frédéric Mahé and Tomás
Flouri
.PP
All rights reserved.
.PP
Contact: Torbjørn Rognes <torognes@ifi.uio.no>,
Department of Informatics, University of Oslo,
PO Box 1080 Blindern, NO-0316 Oslo, Norway
.PP
This software is dual-licensed and available under a choice
of one of two licenses, either under the terms of the GNU
General Public License version 3 or the BSD 2-Clause License.
.PP
\fBGNU General Public License version 3\fR
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.PP
.PP
\fBThe BSD 2-Clause License\fR
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
.PP
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.PP
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
.PP
We would like to thank the authors of the following projects for
making their source code available:
.RS
.IP - 2
\fBvsearch\fR includes code from Google's CityHash project by Geoff
Pike and Jyrki Alakuijala, providing some excellent hash functions
available under a MIT license.
.IP -
\fBvsearch\fR includes code derived from Tatusov and Lipman's DUST
program that is in the public domain.
.IP -
\fBvsearch\fR includes public domain code written by Alexander Peslyak
for the MD5 message digest algorithm.
.IP -
\fBvsearch\fR includes public domain code written by Steve Reid and
others for the SHA1 message digest algorithm.
.IP -
\fBvsearch\fR binaries may include code from the zlib library,
copyright Jean-Loup Gailly and Mark Adler.
.IP -
\fBvsearch\fR binaries may include code from the bzip2 library,
copyright Julian R. Seward.
.RE
.PP
.\" ============================================================================
.SH SEE ALSO
\fBswipe\fR, an extremely fast pairwise local (Smith-Waterman)
database search tool by Torbjørn Rognes, available at
<https://github.com/torognes/swipe>.
.PP
\fBswarm\fR, a fast and accurate amplicon clustering method by
Frédéric Mahé and Torbjørn Rognes, available at
<https://github.com/torognes/swarm>.
.PP
.\" ============================================================================
.SH VERSION HISTORY
New features and important modifications of \fBvsearch\fR (short lived
or minor bug releases may not be mentioned):
.RS
.TP
.BR v1.0.0\~ "released November 28th, 2014"
First public release.
.TP
.BR v1.0.1\~ "released December 1st, 2014"
Bug fixes (sortbysize, semicolon after size annotation in headers) and
minor changes (labels as secondary sort key for most sorts, treat T
and U as identical for dereplication, only output size in
\-\-dbmatched file if \-\-sizeout specified).
.TP
.BR v1.0.2\~ "released December 6th, 2014"
Bug fixes (ssse3/sse4.1 requirement, memory leak).
.TP
.BR v1.0.3\~ "released December 6th, 2014"
Bug fix (now writes help to stdout instead of stderr).
.TP
.BR v1.0.4\~ "released December 8th, 2014"
Added \-\-allpairs_global option. Reduce memory requirements slightly
and eliminate memory leaks.
.TP
.BR v1.0.5\~ "released December 9th, 2014"
Fixes a minor bug with \-\-allpairs_global and \-\-acceptall options.
.TP
.BR v1.0.6\~ "released December 14th, 2014"
Fixes a memory allocation bug in chimera detection (\-\-uchime_ref
option).
.TP
.BR v1.0.7\~ "released December 19th, 2014"
Fixes a bug in the output from chimera detection with the
\-\-uchimeout option.
.TP
.BR v1.0.8\~ "released January 22nd, 2015"
Introduces several changes and bug fixes:
.RS
.IP - 2
a new linear memory aligner for alignment of sequences longer than
5,000 nucleotides,
.IP -
a new \-\-cluster_size command that sorts sequences by decreasing
abundance before clustering,
.IP -
meaning of userfields qlo, qhi, tlo, thi changed for compatibility
with usearch,
.IP -
new userfields qilo, qihi, tilo, tihi give alignment coordinates
ignoring terminal gaps,
.IP -
in \-\-uc output files, a perfect alignment is indicated with a '='
sign,
.IP -
the option \-\-cluster_fast now sorts sequences by decreasing length,
then by decreasing abundance and finally by sequence identifier,
.IP -
default \-\-maxseqlength value set to 50,000 nucleotides,
.IP -
fix for bug in alignment in rare cases,
.IP -
fix for lack of detection of under- or overflow in SIMD aligner.
.RE
.TP
.BR v1.0.9\~ "released January 22nd, 2015"
Fixes a bug in the function sorting sequences by decreasing abundance
(\-\-sortbysize).
.TP
.BR v1.0.10\~ "released January 23rd, 2015"
Fixes a bug where the \-\-sizein option was ignored and always treated
as on, affecting clustering and dereplication commands.
.TP
.BR v1.0.11\~ "released February 5th, 2015"
Introduces the possibility to output results in SAM format (for
clustering, pairwise alignment and searching).
.TP
.BR v1.0.12\~ "released February 6th, 2015"
Temporarily fixes a problem with long headers in FASTA files.
.TP
.BR v1.0.13\~ "released February 17th, 2015"
Fix a memory allocation problem when computing multiple sequence
alignments with the \-\-msaout and \-\-consout options, as well as a
memory leak.  Also increased line buffer for reading FASTA files to
4MB.
.TP
.BR v1.0.14\~ "released February 17th, 2015"
Fix a bug where the multiple alignment and consensus sequence computed
after clustering ignored the strand of the sequences. Also decreased
size of line buffer for reading FASTA files to 1MB again due to
excessive stack memory usage.
.TP
.BR v1.0.15\~ "released February 18th, 2015"
Fix bug in calculation of identity metric between sequences when using
the MBL definition (\-\-iddef 3).
.TP
.BR v1.0.16\~ "released February 19th, 2015"
Integrated patches from Debian for increased compatibility with
various architectures.
.TP
.BR v1.1.0\~ "released February 20th, 2015"
Added the \-\-quiet option to suppress all output to stdout and stderr
except for warnings and fatal errors. Added the \-\-log option to
write messages to a log file.
.TP
.BR v1.1.1\~ "released February 20th, 2015"
Added info about \-\-log and \-\-quiet options to help text.
.TP
.BR v1.1.2\~ "released March 18th, 2015"
Fix bug with large datasets. Fix format of help info.
.TP
.BR v1.1.3\~ "released March 18th, 2015"
Fix more bugs with large datasets.
.TP
.BR v1.2.0-1.2.19\~ "released July 6th to September 8th, 2015"
Several new commands and options added. Bugs fixed. Documentation
updated.
.TP
.BR v1.3.0\~ "released September 9th, 2015"
Changed to autotools build system.
.TP
.BR v1.3.1\~ "released September 14th, 2015"
Several new commands and options. Bug fixes.
.TP
.BR v1.3.2\~ "released September 15th, 2015"
Fixed memory leaks. Added '-h' shortcut for help. Removed extra 'v' in
version number.
.TP
.BR v1.3.3\~ "released September 15th, 2015"
Fixed bug in hexadecimal digits of MD5 and SHA1 digests. Added
\-\-samheader option.
.TP
.BR v1.3.4\~ "released September 16th, 2015"
Fixed compilation problems with zlib and bzip2lib.
.TP
.BR v1.3.5\~ "released September 17th, 2015"
Minor configuration/makefile changes to compile to native CPU and
simplify makefile.
.TP
.BR v1.4.0\~ "released September 25th, 2015"
Added \-\-sizeorder option.
.TP
.BR v1.4.1\~ "released September 29th, 2015"
Inserted public domain MD5 and SHA1 code to eliminate dependency on
crypto and openssl libraries and their licensing issues.
.TP
.BR v1.4.2\~ "released October 2nd, 2015"
Dynamic loading of libraries for reading gzip and bzip2 compressed
files if available. Circumvention of missing gzoffset function in
zlib 1.2.3 and earlier.
.TP
.BR v1.4.3\~ "released October 3rd, 2015"
Fix a bug with determining amount of memory on some versions of Apple
OS X.
.TP
.BR v1.4.4\~ "released October 3rd, 2015"
Remove debug message.
.TP
.BR v1.4.5\~ "released October 6th, 2015"
Fix memory allocation bug when reading long FASTA sequences.
.TP
.BR v1.4.6\~ "released October 6th, 2015"
Fix subtle bug in SIMD alignment code that reduced accuracy.
.TP
.BR v1.4.7\~ "released October 7th, 2015"
Fixes a problem with searching for or clustering sequences with
repeats. In this new version, vsearch looks at all words occurring at
least once in the sequences in the initial step. Previously only words
occurring exactly once were considered. In addition, vsearch now
requires at least 10 words to be shared by the sequences, previously
only 6 were required. If the query contains less than 10 words, all
words must be present for a match. This change seems to lead to
slightly reduced recall, but somewhat increased precision, ending up
with slightly improved overall accuracy.
.TP
.BR v1.5.0\~ "released October 7th, 2015"
This version introduces the new option \-\-minwordmatches that allows
the user to specify the minimum number of matching unique words before
a sequence is considered further. New default values for different
word lengths are also set. The minimum word length is increased to 7.
.TP
.BR v1.6.0\~ "released October 9th, 2015"
This version adds the relabeling options (\-\-relabel, \-\-relabel_md5
and \-\-relabel_sha1) to the shuffle command. It also adds the
\-\-xsize option to the clustering, dereplication, shuffling and
sorting commands.
.TP
.BR v1.6.1\~ "released October 14th, 2015"
Fix bugs and update manual and help text regarding relabelling. Add
all relabelling options to the subsampling command. Add the \-\-xsize
option to chimera detection, dereplication and fastq filtering
commands. Refactoring of code.
.TP
.BR v1.7.0\~ "released October 14th, 2015"
Add \-\-relabel_keep option.
.TP
.BR v1.8.0\~ "released October 19th, 2015"
Added \-\-search_exact, \-\-fastx_mask and \-\-fastq_convert commands.
Changed most commands to read FASTQ input files as well as FASTA
files.  Modified \-\-fastx_revcomp and \-\-fastx_subsample to write
FASTQ files.
.TP
.BR v1.8.1\~ "released November 2nd, 2015"
Fixes for compatibility with QIIME and older OS X versions.
.TP
.BR v1.9.0\~ "released November 12th, 2015"
Added the \-\-fastq_mergepairs command and associated options. This
command has not been tested well yet. Included additional files to
avoid dependency of autoconf for compilation. Fixed an error where
identifiers in fasta headers where not truncated at tabs, just spaces.
Fixed a bug in detection of the file format (FASTA/FASTQ) of a gzip
compressed input file.
.TP
.BR v1.9.1\~ "released November 13th, 2015"
Fixed memory leak and a bug in score computation in
\-\-fastq_mergepairs, and improved speed.
.TP
.BR v1.9.2\~ "released November 17th, 2015"
Fixed a bug in the computation of some values with \-\-fastq_stats.
.TP
.BR v1.9.3\~ "released November 19th, 2015"
Workaround for missing x86intrin.h with old compilers.
.TP
.BR v1.9.4\~ "released December 3rd, 2015"
Fixed incrementation of counter when relabeling dereplicated
sequences.
.TP
.BR v1.9.5\~ "released December 3rd, 2015"
Fixed bug resulting in inferior chimera detection performance.
.TP
.BR v1.9.6\~ "released January 8th, 2016"
Fixed bug in aligned sequences produced with \-\-fastapairs and
\-\-userout (qrow, trow) options.
.TP
.BR v1.9.7\~ "released January 12th, 2016"
Masking behavior is changed somewhat to keep the letter case of the
input sequences unchanged when no masking is performed. Masking is now
performed also during chimera detection. Documentation updated.
.TP
.BR v1.9.8\~ "released January 22nd, 2016"
Fixed bug causing segfault when chimera detection is performed on
extremely short sequences.
.TP
.BR v1.9.9\~ "released January 22nd, 2016"
Adjusted default minimum number of word matches during searches for
improved performance.
.TP
.BR v1.9.10\~ "released January 25th, 2016"
Fixed bug related to masking and lower case database sequences.
.TP
.BR v1.10.0\~ "released February 11th, 2016"
Parallelized and improved merging of paired-end reads and adjusted
some defaults. Removed progress indicator when stderr is not a
terminal. Added \-\-fasta_score option to report chimera scores in
FASTA files. Added \-\-rereplicate and \-\-fastq_eestats
commands. Fixed typos. Added relabelling to files produced with
\-\-consout and \-\-profile options.
.TP
.BR v1.10.1\~ "released February 23rd, 2016"
Fixed a bug affecting the \-\-fastq_mergepairs command causing FASTQ
headers to be truncated at first space (despite the bug fix release
1.9.0 of November 12th, 2015). Full headers are now included in the
output (no matter if \-\-notrunclabels is in effect or not).
.TP
.BR v1.10.2\~ "released March 18th, 2016"
Fixed a bug causing a segmentation fault when running
\-\-usearch_global with an empty query sequence. Also fixed a bug
causing imperfect alignments to be reported with an alignment string
of '=' in uc output files. Fixed typos in man file. Fixed fasta/fastq
processing code regarding presence or absence of compression library
header files.
.TP
.BR v1.11.1\~ "released April 13th, 2016"
Added strand information in UC file for \-\-derep_fulllength and
\-\-derep_prefix. Added expected errors (ee) to header of FASTA files
specified with \-\-fastaout and \-\-fastaout_discarded when \-\-eeout
or \-\-fastq_eeout option is in effect for fastq_filter and
fastq_mergepairs. The options \-\-eeout and \-\-fastq_eeout are now
equivalent.
.TP
.BR v1.11.2\~ "released June 21st, 2016"
Two bugs were fixed. The first issue was related to the \-\-query_cov
option that used a different coverage definition than the qcov
userfield. The coverage is now defined as the fraction of the whole
query sequence length that is aligned with matching or mismatching
residues in the target. All gaps are ignored. The other issue was
related to the consensus sequences produced during clustering when
only N's were present in some positions. Previously these would be
converted to A's in the consensus. The behaviour is changed so that
N's are produced in the consensus, and it should now be more
compatible with usearch.
.TP
.BR v2.0.0\~ "released June 24th, 2016"
This major new version supports reading from pipes. Two new options
are added: \-\-gzip_decompress and \-\-bzip2_decompress. One of these
options must be specified if reading compressed input from a pipe, but
are not required when reading from ordinary files. The vsearch header
that was previously written to stdout is now written to stderr. This
enables piping of results for further processing. The file name '\-'
now represent standard input (/dev/stdin) or standard output
(/dev/stdout) when reading or writing files, respectively. Code for
reading FASTA and FASTQ files has been refactored.
.TP
.BR v2.0.1\~ "released June 30th, 2016"
Avoid segmentation fault when masking very long sequences.
.TP
.BR v2.0.2\~ "released July 5th, 2016"
Avoid warnings when compiling with GCC 6.
.TP
.BR v2.0.3\~ "released August 2nd, 2016"
Fixed bad compiler options resulting in Illegal instruction errors
when running precompiled binaries.
.TP
.BR v2.0.4\~ "released September 1st, 2016"
Improved error message for bad FASTQ quality values. Improved manual.
.TP
.BR v2.0.5\~ "released September 9th, 2016"
Add options \-\-fastaout_discarded and \-\-fastqout_discarded to
output discarded sequences from subsampling to separate files. Updated
manual.
.TP
.BR v2.1.0\~ "released September 16th, 2016"
New command: \-\-fastx_filter. New options: \-\-fastq_maxlen,
\-\-fastq_truncee. Allow \-\-minwordmatches down to 3.
.TP
.BR v2.1.1\~ "released September 23rd, 2016"
Fixed bugs in output to UC-files. Improved help text and manual.
.TP
.BR v2.1.2\~ "released September 28th, 2016"
Fixed incorrect abundance output from fastx_filter and fastq_filter
when relabelling.
.TP
.BR v2.2.0\~ "released October 7th, 2016"
Added OTU table generation options \-\-biomout, \-\-mothur_shared_out
and \-\-otutabout to the clustering and searching commands.
.TP
.BR v2.3.0\~ "released October 10th, 2016"
Allowed zero-length sequences in FASTA and FASTQ files. Added
\-\-fastq_trunclen_keep option. Fixed bug with output of OTU tables to
pipes.
.TP
.BR v2.3.1\~ "released November 16th, 2016"
Fixed bug where \-\-minwordmatches 0 was interpreted as the default
minimum word matches for the given word length instead of zero. When
used in combination with \-\-maxaccepts 0 and \-\-maxrejects 0 it will
allow complete bypass of kmer-based heuristics.
.TP
.BR v2.3.2\~ "released November 18th, 2016"
Fixed bug where vsearch reported the ordinal number of the target
sequence instead of the cluster number in column 2 on H-lines in the
uc output file after clustering. For search and alignment commands
both usearch and vsearch reports the target sequence number here.
.TP
.BR v2.3.3\~ "released December 5th, 2016"
A minor speed improvement.
.TP
.BR v2.3.4\~ "released December 9th, 2016"
Fixed bug in output of sequence profiles and updated documentation.
.TP
.BR v2.4.0\~ "released February 8th, 2017"
Added support for Linux on Power8 systems (ppc64le) and Windows on
x86_64. Improved detection of pipes when reading FASTA and FASTQ
files. Corrected option for specifiying output from fastq_eestats
command in help text.
.TP
.BR v2.4.1\~ "released March 1st, 2017"
Fixed an overflow bug in fastq_stats and fastq_eestats affecting
analysis of very large FASTQ files. Fixed maximum memory usage
reporting on Windows.
.TP
.BR v2.4.2\~ "released March 10th, 2017"
Default value for fastq_minovlen increased to 16 in accordance with
help text and for compatibility with usearch. Minor changes for
improved accuracy of paired-end read merging.
.TP
.BR v2.4.3\~ "released April 6th, 2017"
Fixed bug with progress bar for shuffling. Fixed missing N-lines in UC
files with usearch_global, search_exact and allpairs_global when the
output_no_hits option was not specified.
.TP
.BR v2.4.4\~ "released August 28th, 2017"
Fixed a few minor bugs, improved error messages and updated
documentation.
.TP
.BR v2.5.0\~ "released October 5th, 2017"
Support for UDB database files. New commands: fastq_stripright,
fastq_eestats2, makeudb_usearch, udb2fasta, udbinfo, and udbstats. New
general option: no_progress. New options minsize and maxsize to
fastx_filter. Minor bug fixes, error message improvements and
documentation updates.
.TP
.BR v2.5.1\~ "released October 25th, 2017"
Fixed bug with bad default value of 1 instead of 32 for minseqlength
when using the makeudb_usearch command.
.TP
.BR v2.5.2\~ "released October 30th, 2017"
Fixed bug with where '-' as an argument to the fastq_eestats2 option
was treated literally instead of equivalent to stdin.
.TP
.BR v2.6.0\~ "released November 10th, 2017"
Rewritten paired-end reads merger with improved accuracy. Decreased
default value for fastq_minovlen option from 16 to 10. The default
value for the fastq_maxdiffs option is increased from 5 to 10. There
are now other more important restrictions that will avoid merging
reads that cannot be reliably aligned.
.TP
.BR v2.6.1\~ "released December 8th, 2017"
Improved parallelisation of paired end reads merging.
.TP
.BR v2.6.2\~ "released December 18th, 2017"
Fixed option xsize that was partially inactive for commands
uchime_denovo, uchime_ref, and fastx_filter.
.TP
.BR v2.7.0\~ "released February 13th, 2018"
Added commands cluster_unoise, uchime2_denovo and uchime3_denovo
contributed by Davide Albanese based on Robert Edgar's
papers. Refactored fasta and fastq print functions as well as code for
extraction of abundance and other attributes from the headers.
.TP
.BR v2.7.1\~ "released February 16th, 2018"
Fix several bugs on Windows related to large files, use of "-" as a
file name to mean stdin or stdout, alignment errors, missed kmers and
corrupted UDB files. Added documentation of UDB-related commands.
.RE
.LP
.\" ============================================================================
.\" TODO:
.\"
.\" NOTES
.\" visualize and output to pdf
.\" man -l vsearch.1
.\" man -t ./doc/vsearch.1 | ps2pdf - > ./doc/vsearch_manual.pdf
.\"
.\" INSTALL (sysadmin)
.\" gzip -c vsearch.1 > vsearch.1.gz
.\" mv vsearch.1.gz /usr/share/man/man1/
